{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cmsgov","text":"<p>An SDK (software development kit) for CMS.gov APIs. Currently implemented APIs include:</p> <ul> <li>Provider Data</li> </ul> <p>(more to come)</p>"},{"location":"#install","title":"Install","text":"<p>You can install this package with pip:</p> <pre><code>pip3 install cmsgov\n</code></pre>"},{"location":"#example-usage","title":"Example Usage","text":"<p>Search for data sets containing the term \"psychiatry\" in one or more fields:</p> <pre><code>from cmsgov.provider_data.v1.client import Client as ProviderDataClient\n\nprovider_data_client: ProviderDataClient = ProviderDataClient()\nprovider_data_client.get_search(fulltext=\"psychiatry\")\n</code></pre>"},{"location":"contributing/","title":"Contributing to cmsgov","text":"<p>Please note that if you are not a contributor on this repository, you can still create pull requests, however you will need to fork this project, push changes to your fork, and create a pull request from your forked repository.</p>"},{"location":"contributing/#creating-a-pull-request","title":"Creating a Pull Request","text":"<ol> <li> <p>Install hatch, if you have not     already done so.</p> </li> <li> <p>If you are using Windows, make sure you've installed <code>make</code>:</p> <pre><code>winget install -e --id ezwinports.make\n</code></pre> </li> <li> <p>Clone and Install</p> <p>To install this project for development of this library, clone this repository (replacing \"~/Code\", below, with the directory under which you want your project to reside), then run <code>make</code>:</p> <pre><code>cd ~/Code &amp;&amp; \\\ngit clone\\\ngithub.com/enorganic/cmsgov.git cmsgov &amp;&amp; \\\ncd cmsgov &amp;&amp; \\\nmake\n</code></pre> </li> <li> <p>Create a new branch for your changes (replacing \"descriptive-branch-name\"     with a descriptive branch name):</p> <pre><code>git branch descriptive-branch-name\n</code></pre> </li> <li> <p>Set environment variables for the following API keys (or create a <code>.env</code>     file in the project root) with the following environment variables set:</p> <pre><code>CMS_GOV_MARKETPLACE_API_KEY=***\n</code></pre> </li> <li> <p>Make some changes.</p> </li> <li> <p>Format and lint your code:</p> <pre><code>make format\n</code></pre> </li> <li> <p>Test your changes:</p> <pre><code>make test\n</code></pre> </li> <li> <p>Push your changes and create a pull request.</p> </li> </ol>"},{"location":"contributing/#adding-a-cmsgov-api","title":"Adding a CMS.gov API","text":"<p>Each CMS.gov API should have a client and model module for each major API version, and these should be automatically generated as part of <code>scripts/remodel.py</code>, which is run with the <code>make remodel</code> target. Modify <code>scripts/remodel.py</code> to add new APIs, referencing the inline documentation/comments in that file for implementation details. Client and model modules should not be edited manually after creation except to rename model classes (renamed model classes will retain their names when <code>make remodel</code> is subsequently executed, as will client parameters derived from these mdoel classes).</p>"},{"location":"contributing/#package-structure","title":"Package Structure","text":"<p>CMS.gov has multiple APIs, each described by an OpenAPI document. Each API corresponds to a python sub-package under <code>cmsgov</code>, which you can find in <code>src/cmsgov</code> in this repository. Within each API package, there will be a version package, under which you will find a client and model module, for example, the following shows the directory structure for the Provider Data API:</p> <pre><code>$ tree -a -I '*.pyc' -I '__pycache__' src/cmsgov/provider_data\nsrc/cmsgov/provider_data\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 py.typed\n\u2514\u2500\u2500 v1\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 client.py\n    \u251c\u2500\u2500 model.py\n    \u2514\u2500\u2500 py.typed\n</code></pre>"},{"location":"contributing/#api-versions","title":"API Versions","text":"<p>A versioned (v1, v2, etc.) sub-package will correspond to each API major version of a CMS.gov API, each generated from their own Open API document. Any modules authored directly under the API sub-package, outside of a version sub-package, should be authored such as to support all published API versions which support the operation, varying logic based on on the source of the client or model instance passed to the function or class, and raising errors when attempting unsupported operations for the API version.</p>"},{"location":"api/provider_data/v1/client/","title":"v1.client","text":""},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client","title":"cmsgov.provider_data.v1.client","text":""},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client","title":"Client","text":"<pre><code>Client(\n    url: (\n        str | None\n    ) = \"https://data.cms.gov/provider-data/api/1\",\n    user: str | None = None,\n    password: str | None = None,\n    api_key: str | None = None,\n    timeout: int = 0,\n    retry_number_of_attempts: int = 3,\n    logger: logging.Logger | None = None,\n    echo: bool = False,\n)\n</code></pre> <p>               Bases: <code>oapi.client.Client</code></p> <p>Parameters:</p> <ul> <li> <code>url</code>               (<code>str | None</code>, default:                   <code>'https://data.cms.gov/provider-data/api/1'</code> )           \u2013            <p>The base URL for API requests.</p> </li> <li> <code>user</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>A user name for use with HTTP basic authentication.</p> </li> <li> <code>password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>A password for use with HTTP basic authentication.</p> </li> <li> <code>api_key</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An API key with which to authenticate requests.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of seconds before a request will timeout and throw an error. If this is 0 (the default), the system default timeout will be used.</p> </li> <li> <code>retry_number_of_attempts</code>               (<code>int</code>, default:                   <code>3</code> )           \u2013            <p>The number of times to retry a request which results in an error.</p> </li> <li> <code>logger</code>               (<code>logging.Logger | None</code>, default:                   <code>None</code> )           \u2013            <p>A <code>logging.Logger</code> to which requests should be logged.</p> </li> <li> <code>echo</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, requests/responses are printed as they occur.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def __init__(\n    self,\n    url: str | None = (\n        \"https://data.cms.gov/provider-data/api/1\"\n    ),\n    user: str | None = None,\n    password: str | None = None,\n    api_key: str | None = None,\n    timeout: int = 0,\n    retry_number_of_attempts: int = 3,\n    logger: Logger | None = None,\n    echo: bool = False,\n) -&gt; None:\n    \"\"\"\n    Parameters:\n        url: The base URL for API requests.\n        user: A user name for use with HTTP basic authentication.\n        password:  A password for use with HTTP basic authentication.\n        api_key: An API key with which to authenticate requests.\n        timeout: The number of seconds before a request will timeout\n            and throw an error. If this is 0 (the default), the system\n            default timeout will be used.\n        retry_number_of_attempts: The number of times to retry\n            a request which results in an error.\n        logger:\n            A `logging.Logger` to which requests should be logged.\n        echo: If `True`, requests/responses are printed as\n            they occur.\n    \"\"\"\n\n    super().__init__(\n        url=url,\n        user=user,\n        password=password,\n        api_key=api_key,\n        timeout=timeout,\n        retry_number_of_attempts=retry_number_of_attempts,\n        logger=logger,\n        echo=echo,\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_imports","title":"get_datastore_imports","text":"<pre><code>get_datastore_imports() -&gt; sob.abc.Dictionary\n</code></pre> <p>Returns a list of all stored importers, with data about their file fetcher and status.</p> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_imports(\n    self,\n) -&gt; sob.abc.Dictionary:\n    \"\"\"\n    Returns a list of all stored importers, with data about their file\n    fetcher and status.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/imports\",\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            sob.Dictionary,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_datastore_imports","title":"post_datastore_imports","text":"<pre><code>post_datastore_imports(\n    datastore_imports_post_request: cmsgov.provider_data.v1.model.DatastoreImportsPostRequest,\n) -&gt; sob.abc.Dictionary\n</code></pre> <p>Immediately starts the import process for a datastore.</p> <p>Parameters:</p> <ul> <li> <code>datastore_imports_post_request</code>               (<code>cmsgov.provider_data.v1.model.DatastoreImportsPostRequest</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_datastore_imports(\n    self,\n    datastore_imports_post_request: (\n        model.DatastoreImportsPostRequest\n    ),\n) -&gt; sob.abc.Dictionary:\n    \"\"\"\n    Immediately starts the import process for a datastore.\n\n    Parameters:\n        datastore_imports_post_request:\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/imports\",\n        method=\"POST\",\n        json=datastore_imports_post_request,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            sob.Dictionary,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_imports_identifier","title":"get_datastore_imports_identifier","text":"<pre><code>get_datastore_imports_identifier(\n    identifier: str,\n) -&gt; (\n    cmsgov.provider_data.v1.model.DatastoreImportGetResponse\n)\n</code></pre> <p>Returns the numbers of rows and columns, and a list of columns headers from the datastore.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A datastore id. Note: there is an inconsistency in this API that will be addressed in the future: The expected format is different from the format supplied in /api/1/ datastore/imports.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_imports_identifier(\n    self,\n    identifier: str,\n) -&gt; model.DatastoreImportGetResponse:\n    \"\"\"\n    Returns the numbers of rows and columns, and a list of columns headers\n    from the datastore.\n\n    Parameters:\n        identifier: A datastore id. Note: there is an inconsistency in\n            this API that will be addressed in the future: The expected\n            format is different from the format supplied in /api/1/\n            datastore/imports.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/imports/{identifier}\".format(**{\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.DatastoreImportGetResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.delete_datastore_imports_identifier","title":"delete_datastore_imports_identifier","text":"<pre><code>delete_datastore_imports_identifier(\n    identifier: str,\n) -&gt; (\n    cmsgov.provider_data.v1.model.DatastoreImportDeleteResponse\n)\n</code></pre> <p>Delete one or more datastores. If the uuid parameter is that of a resource, delete that resource. If the uuid parameter is that of a dataset, delete all resources of that dataset.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A datastore id. Note: there is an inconsistency in this API that will be addressed in the future: The expected format is different from the format supplied in /api/1/ datastore/imports.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def delete_datastore_imports_identifier(\n    self,\n    identifier: str,\n) -&gt; model.DatastoreImportDeleteResponse:\n    \"\"\"\n    Delete one or more datastores. If the uuid parameter is that of a\n    resource, delete that resource. If the uuid parameter is that of a\n    dataset, delete all resources of that dataset.\n\n    Parameters:\n        identifier: A datastore id. Note: there is an inconsistency in\n            this API that will be addressed in the future: The expected\n            format is different from the format supplied in /api/1/\n            datastore/imports.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/imports/{identifier}\".format(**{\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"DELETE\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.DatastoreImportDeleteResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_query","title":"get_datastore_query","text":"<pre><code>get_datastore_query(\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        cmsgov.provider_data.v1.model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        cmsgov.provider_data.v1.model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreQuerySorts\n        | None\n    ) = None\n) -&gt; (\n    cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponse\n    | str\n)\n</code></pre> <p>Simple GET equivalent of a POST query. Note that parameters containing arrays or objects are not yet supported by SwaggerUI. For conditions, sorts, and other complex parameters, write your query in JSON and then convert to a nested query string. See this web tool for an example.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>offset</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>count</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>results</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>schema</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>keys</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>format_</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>row_ids</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>resources</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryResources | None</code>, default:                   <code>None</code> )           \u2013            <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> </li> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryProperties | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditions | None</code>, default:                   <code>None</code> )           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>joins</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryJoins | None</code>, default:                   <code>None</code> )           \u2013            <p>Joins</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryGroupings | None</code>, default:                   <code>None</code> )           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuerySorts | None</code>, default:                   <code>None</code> )           \u2013            <p>Result sorting directives.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_query(\n    self,\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        model.DatastoreQuerySorts\n        | None\n    ) = None,\n) -&gt; (\n    model.JsonOrCsvQueryOkResponse\n    | str\n):\n    \"\"\"\n    Simple GET equivalent of a POST query. Note that parameters containing\n    arrays or objects are not yet supported by SwaggerUI. For conditions,\n    sorts, and other complex parameters, write your query in JSON and then\n    convert to a nested query string. See [this web tool](https://www.\n    convertonline.io/convert/json-to-query-string) for an example.\n\n    Parameters:\n        limit:\n        offset:\n        count:\n        results:\n        schema:\n        keys:\n        format_:\n        row_ids:\n        resources: Resources to query against and aliases. Usually you\n            will add only one resource to this array, but if performing a\n            join, list the primary resource first and then add resources to\n            be used in the joins array.\n        properties:\n        conditions: Conditions or groups of conditions for the query,\n            bound by 'and' operator.\n        joins: Joins\n        groupings: Properties or aliases to group results by.\n        sorts: Result sorting directives.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query\",\n        method=\"GET\",\n        query={\n            \"limit\": oapi.client.format_argument_value(\n                \"limit\",\n                limit,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"offset\": oapi.client.format_argument_value(\n                \"offset\",\n                offset,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"count\": oapi.client.format_argument_value(\n                \"count\",\n                count,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"results\": oapi.client.format_argument_value(\n                \"results\",\n                results,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"schema\": oapi.client.format_argument_value(\n                \"schema\",\n                schema,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"keys\": oapi.client.format_argument_value(\n                \"keys\",\n                keys,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"format\": oapi.client.format_argument_value(\n                \"format\",\n                format_,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"rowIds\": oapi.client.format_argument_value(\n                \"rowIds\",\n                row_ids,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"resources\": oapi.client.format_argument_value(\n                \"resources\",\n                resources,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"properties\": oapi.client.format_argument_value(\n                \"properties\",\n                properties,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"conditions\": oapi.client.format_argument_value(\n                \"conditions\",\n                conditions,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"joins\": oapi.client.format_argument_value(\n                \"joins\",\n                joins,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"groupings\": oapi.client.format_argument_value(\n                \"groupings\",\n                groupings,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"sorts\": oapi.client.format_argument_value(\n                \"sorts\",\n                sorts,\n                style=\"deepObject\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            model.JsonOrCsvQueryOkResponse,\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_datastore_query","title":"post_datastore_query","text":"<pre><code>post_datastore_query(\n    datastore_query: cmsgov.provider_data.v1.model.DatastoreQuery,\n) -&gt; (\n    cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponse\n    | str\n)\n</code></pre> <p>Query one or more datastore resources</p> <p>Parameters:</p> <ul> <li> <code>datastore_query</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuery</code>)           \u2013            <p>Schema for DKAN datastore queries</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_datastore_query(\n    self,\n    datastore_query: (\n        model.DatastoreQuery\n    ),\n) -&gt; (\n    model.JsonOrCsvQueryOkResponse\n    | str\n):\n    \"\"\"\n    Query one or more datastore resources\n\n    Parameters:\n        datastore_query: Schema for DKAN datastore queries\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query\",\n        method=\"POST\",\n        json=datastore_query,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            model.JsonOrCsvQueryOkResponse,\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_query_download","title":"get_datastore_query_download","text":"<pre><code>get_datastore_query_download(\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        cmsgov.provider_data.v1.model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        cmsgov.provider_data.v1.model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreQuerySorts\n        | None\n    ) = None\n) -&gt; str\n</code></pre> <p>Simple GET equivalent of a POST query. Note that parameters containing arrays or objects are not yet supported by SwaggerUI. For conditions, sorts, and other complex parameters, write your query in JSON and then convert to a nested query string. See this web tool for an example.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>offset</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>count</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>results</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>schema</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>keys</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>format_</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>row_ids</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>resources</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryResources | None</code>, default:                   <code>None</code> )           \u2013            <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> </li> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryProperties | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditions | None</code>, default:                   <code>None</code> )           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>joins</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryJoins | None</code>, default:                   <code>None</code> )           \u2013            <p>Joins</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryGroupings | None</code>, default:                   <code>None</code> )           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuerySorts | None</code>, default:                   <code>None</code> )           \u2013            <p>Result sorting directives.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_query_download(\n    self,\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        model.DatastoreQuerySorts\n        | None\n    ) = None,\n) -&gt; str:\n    \"\"\"\n    Simple GET equivalent of a POST query. Note that parameters containing\n    arrays or objects are not yet supported by SwaggerUI. For conditions,\n    sorts, and other complex parameters, write your query in JSON and then\n    convert to a nested query string. See [this web tool](https://www.\n    convertonline.io/convert/json-to-query-string) for an example.\n\n    Parameters:\n        limit:\n        offset:\n        count:\n        results:\n        schema:\n        keys:\n        format_:\n        row_ids:\n        resources: Resources to query against and aliases. Usually you\n            will add only one resource to this array, but if performing a\n            join, list the primary resource first and then add resources to\n            be used in the joins array.\n        properties:\n        conditions: Conditions or groups of conditions for the query,\n            bound by 'and' operator.\n        joins: Joins\n        groupings: Properties or aliases to group results by.\n        sorts: Result sorting directives.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/download\",\n        method=\"GET\",\n        query={\n            \"limit\": oapi.client.format_argument_value(\n                \"limit\",\n                limit,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"offset\": oapi.client.format_argument_value(\n                \"offset\",\n                offset,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"count\": oapi.client.format_argument_value(\n                \"count\",\n                count,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"results\": oapi.client.format_argument_value(\n                \"results\",\n                results,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"schema\": oapi.client.format_argument_value(\n                \"schema\",\n                schema,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"keys\": oapi.client.format_argument_value(\n                \"keys\",\n                keys,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"format\": oapi.client.format_argument_value(\n                \"format\",\n                format_,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"rowIds\": oapi.client.format_argument_value(\n                \"rowIds\",\n                row_ids,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"resources\": oapi.client.format_argument_value(\n                \"resources\",\n                resources,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"properties\": oapi.client.format_argument_value(\n                \"properties\",\n                properties,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"conditions\": oapi.client.format_argument_value(\n                \"conditions\",\n                conditions,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"joins\": oapi.client.format_argument_value(\n                \"joins\",\n                joins,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"groupings\": oapi.client.format_argument_value(\n                \"groupings\",\n                groupings,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"sorts\": oapi.client.format_argument_value(\n                \"sorts\",\n                sorts,\n                style=\"deepObject\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_datastore_query_download","title":"post_datastore_query_download","text":"<pre><code>post_datastore_query_download(\n    datastore_query: cmsgov.provider_data.v1.model.DatastoreQuery,\n) -&gt; str\n</code></pre> <p>Query one or more datastore resources for file download</p> <p>Parameters:</p> <ul> <li> <code>datastore_query</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuery</code>)           \u2013            <p>Schema for DKAN datastore queries</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_datastore_query_download(\n    self,\n    datastore_query: (\n        model.DatastoreQuery\n    ),\n) -&gt; str:\n    \"\"\"\n    Query one or more datastore resources for file download\n\n    Parameters:\n        datastore_query: Schema for DKAN datastore queries\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/download\",\n        method=\"POST\",\n        json=datastore_query,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_query_distribution_id","title":"get_datastore_query_distribution_id","text":"<pre><code>get_datastore_query_distribution_id(\n    distribution_id: str,\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        cmsgov.provider_data.v1.model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        cmsgov.provider_data.v1.model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreQuerySorts\n        | None\n    ) = None\n) -&gt; (\n    cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponse\n    | str\n)\n</code></pre> <p>Simple GET equivalent of a POST query. Note that parameters containing arrays or objects are not yet supported by SwaggerUI. For conditions, sorts, and other complex parameters, write your query in JSON and then convert to a nested query string. See this web tool for an example.</p> <p>Parameters:</p> <ul> <li> <code>distribution_id</code>               (<code>str</code>)           \u2013            <p>A distribution ID</p> </li> <li> <code>limit</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>offset</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>count</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>results</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>schema</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>keys</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>format_</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>row_ids</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>resources</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryResources | None</code>, default:                   <code>None</code> )           \u2013            <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> </li> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryProperties | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditions | None</code>, default:                   <code>None</code> )           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>joins</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryJoins | None</code>, default:                   <code>None</code> )           \u2013            <p>Joins</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryGroupings | None</code>, default:                   <code>None</code> )           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuerySorts | None</code>, default:                   <code>None</code> )           \u2013            <p>Result sorting directives.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_query_distribution_id(\n    self,\n    distribution_id: str,\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        model.DatastoreQuerySorts\n        | None\n    ) = None,\n) -&gt; (\n    model.JsonOrCsvQueryOkResponse\n    | str\n):\n    \"\"\"\n    Simple GET equivalent of a POST query. Note that parameters containing\n    arrays or objects are not yet supported by SwaggerUI. For conditions,\n    sorts, and other complex parameters, write your query in JSON and then\n    convert to a nested query string. See [this web tool](https://www.\n    convertonline.io/convert/json-to-query-string) for an example.\n\n    Parameters:\n        distribution_id: A distribution ID\n        limit:\n        offset:\n        count:\n        results:\n        schema:\n        keys:\n        format_:\n        row_ids:\n        resources: Resources to query against and aliases. Usually you\n            will add only one resource to this array, but if performing a\n            join, list the primary resource first and then add resources to\n            be used in the joins array.\n        properties:\n        conditions: Conditions or groups of conditions for the query,\n            bound by 'and' operator.\n        joins: Joins\n        groupings: Properties or aliases to group results by.\n        sorts: Result sorting directives.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/{distributionId}\".format(**{\n            \"distributionId\": str(oapi.client.format_argument_value(\n                \"distributionId\",\n                distribution_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n        query={\n            \"limit\": oapi.client.format_argument_value(\n                \"limit\",\n                limit,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"offset\": oapi.client.format_argument_value(\n                \"offset\",\n                offset,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"count\": oapi.client.format_argument_value(\n                \"count\",\n                count,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"results\": oapi.client.format_argument_value(\n                \"results\",\n                results,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"schema\": oapi.client.format_argument_value(\n                \"schema\",\n                schema,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"keys\": oapi.client.format_argument_value(\n                \"keys\",\n                keys,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"format\": oapi.client.format_argument_value(\n                \"format\",\n                format_,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"rowIds\": oapi.client.format_argument_value(\n                \"rowIds\",\n                row_ids,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"resources\": oapi.client.format_argument_value(\n                \"resources\",\n                resources,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"properties\": oapi.client.format_argument_value(\n                \"properties\",\n                properties,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"conditions\": oapi.client.format_argument_value(\n                \"conditions\",\n                conditions,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"joins\": oapi.client.format_argument_value(\n                \"joins\",\n                joins,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"groupings\": oapi.client.format_argument_value(\n                \"groupings\",\n                groupings,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"sorts\": oapi.client.format_argument_value(\n                \"sorts\",\n                sorts,\n                style=\"deepObject\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            model.JsonOrCsvQueryOkResponse,\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_datastore_query_distribution_id","title":"post_datastore_query_distribution_id","text":"<pre><code>post_datastore_query_distribution_id(\n    datastore_resource_query: cmsgov.provider_data.v1.model.DatastoreResourceQuery,\n    distribution_id: str,\n) -&gt; (\n    cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponse\n    | str\n)\n</code></pre> <p>Query a single datastore resource</p> <p>Parameters:</p> <ul> <li> <code>datastore_resource_query</code>               (<code>cmsgov.provider_data.v1.model.DatastoreResourceQuery</code>)           \u2013            <p>Schema for DKAN datastore queries. When querying against a specific resource, the \"resource\" property is always optional. If you want to set it explicitly, note that it will be aliased to simply \"t\".</p> </li> <li> <code>distribution_id</code>               (<code>str</code>)           \u2013            <p>A distribution ID</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_datastore_query_distribution_id(\n    self,\n    datastore_resource_query: (\n        model.DatastoreResourceQuery\n    ),\n    distribution_id: str,\n) -&gt; (\n    model.JsonOrCsvQueryOkResponse\n    | str\n):\n    \"\"\"\n    Query a single datastore resource\n\n    Parameters:\n        datastore_resource_query: Schema for DKAN datastore queries.\n            When querying against a specific resource, the \"resource\"\n            property is always optional. If you want to set it explicitly,\n            note that it will be aliased to simply \"t\".\n        distribution_id: A distribution ID\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/{distributionId}\".format(**{\n            \"distributionId\": str(oapi.client.format_argument_value(\n                \"distributionId\",\n                distribution_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"POST\",\n        json=datastore_resource_query,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            model.JsonOrCsvQueryOkResponse,\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_query_dataset_id_index","title":"get_datastore_query_dataset_id_index","text":"<pre><code>get_datastore_query_dataset_id_index(\n    dataset_id: str,\n    index: int,\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        cmsgov.provider_data.v1.model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        cmsgov.provider_data.v1.model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreQuerySorts\n        | None\n    ) = None\n) -&gt; (\n    cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponse\n    | str\n)\n</code></pre> <p>Simple GET equivalent of a POST query -- see the POST endpoint documentation for full query schema. A few basic parameters are provided here as examples. For more reliable queries, write your query in JSON and then convert to a query string. See this web tool for an example.</p> <p>Parameters:</p> <ul> <li> <code>dataset_id</code>               (<code>str</code>)           \u2013            <p>A dataset ID</p> </li> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>The index of a distribution in a dataset's distribution array. For instance, the first distribution in a dataset would have an index of \"0,\" the second would have \"1\", etc.</p> </li> <li> <code>limit</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>offset</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>count</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>results</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>schema</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>keys</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>format_</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>row_ids</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>resources</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryResources | None</code>, default:                   <code>None</code> )           \u2013            <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> </li> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryProperties | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditions | None</code>, default:                   <code>None</code> )           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>joins</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryJoins | None</code>, default:                   <code>None</code> )           \u2013            <p>Joins</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryGroupings | None</code>, default:                   <code>None</code> )           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuerySorts | None</code>, default:                   <code>None</code> )           \u2013            <p>Result sorting directives.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_query_dataset_id_index(\n    self,\n    dataset_id: str,\n    index: int,\n    *,\n    limit: int | None = None,\n    offset: int | None = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n    resources: (\n        model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        model.DatastoreQuerySorts\n        | None\n    ) = None,\n) -&gt; (\n    model.JsonOrCsvQueryOkResponse\n    | str\n):\n    \"\"\"\n    Simple GET equivalent of a POST query -- see the POST endpoint\n    documentation for full query schema. A few basic parameters are\n    provided here as examples. For more reliable queries, write your query\n    in JSON and then convert to a query string. See [this web tool](https:/\n    /www.convertonline.io/convert/json-to-query-string) for an example.\n\n    Parameters:\n        dataset_id: A dataset ID\n        index: The index of a distribution in a dataset's distribution\n            array. For instance, the first distribution in a dataset would\n            have an index of \"0,\" the second would have \"1\", etc.\n        limit:\n        offset:\n        count:\n        results:\n        schema:\n        keys:\n        format_:\n        row_ids:\n        resources: Resources to query against and aliases. Usually you\n            will add only one resource to this array, but if performing a\n            join, list the primary resource first and then add resources to\n            be used in the joins array.\n        properties:\n        conditions: Conditions or groups of conditions for the query,\n            bound by 'and' operator.\n        joins: Joins\n        groupings: Properties or aliases to group results by.\n        sorts: Result sorting directives.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/{datasetId}/{index}\".format(**{\n            \"datasetId\": str(oapi.client.format_argument_value(\n                \"datasetId\",\n                dataset_id,\n                style=\"simple\",\n                explode=False,\n            )),\n            \"index\": str(oapi.client.format_argument_value(\n                \"index\",\n                index,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n        query={\n            \"limit\": oapi.client.format_argument_value(\n                \"limit\",\n                limit,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"offset\": oapi.client.format_argument_value(\n                \"offset\",\n                offset,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"count\": oapi.client.format_argument_value(\n                \"count\",\n                count,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"results\": oapi.client.format_argument_value(\n                \"results\",\n                results,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"schema\": oapi.client.format_argument_value(\n                \"schema\",\n                schema,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"keys\": oapi.client.format_argument_value(\n                \"keys\",\n                keys,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"format\": oapi.client.format_argument_value(\n                \"format\",\n                format_,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"rowIds\": oapi.client.format_argument_value(\n                \"rowIds\",\n                row_ids,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"resources\": oapi.client.format_argument_value(\n                \"resources\",\n                resources,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"properties\": oapi.client.format_argument_value(\n                \"properties\",\n                properties,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"conditions\": oapi.client.format_argument_value(\n                \"conditions\",\n                conditions,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"joins\": oapi.client.format_argument_value(\n                \"joins\",\n                joins,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"groupings\": oapi.client.format_argument_value(\n                \"groupings\",\n                groupings,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"sorts\": oapi.client.format_argument_value(\n                \"sorts\",\n                sorts,\n                style=\"deepObject\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            model.JsonOrCsvQueryOkResponse,\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_datastore_query_dataset_id_index","title":"post_datastore_query_dataset_id_index","text":"<pre><code>post_datastore_query_dataset_id_index(\n    datastore_resource_query: cmsgov.provider_data.v1.model.DatastoreResourceQuery,\n    dataset_id: str,\n    index: int,\n) -&gt; (\n    cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponse\n    | str\n)\n</code></pre> <p>Query a single datastore resource</p> <p>Parameters:</p> <ul> <li> <code>datastore_resource_query</code>               (<code>cmsgov.provider_data.v1.model.DatastoreResourceQuery</code>)           \u2013            <p>Schema for DKAN datastore queries. When querying against a specific resource, the \"resource\" property is always optional. If you want to set it explicitly, note that it will be aliased to simply \"t\".</p> </li> <li> <code>dataset_id</code>               (<code>str</code>)           \u2013            <p>A dataset ID</p> </li> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>The index of a distribution in a dataset's distribution array. For instance, the first distribution in a dataset would have an index of \"0,\" the second would have \"1\", etc.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_datastore_query_dataset_id_index(\n    self,\n    datastore_resource_query: (\n        model.DatastoreResourceQuery\n    ),\n    dataset_id: str,\n    index: int,\n) -&gt; (\n    model.JsonOrCsvQueryOkResponse\n    | str\n):\n    \"\"\"\n    Query a single datastore resource\n\n    Parameters:\n        datastore_resource_query: Schema for DKAN datastore queries.\n            When querying against a specific resource, the \"resource\"\n            property is always optional. If you want to set it explicitly,\n            note that it will be aliased to simply \"t\".\n        dataset_id: A dataset ID\n        index: The index of a distribution in a dataset's distribution\n            array. For instance, the first distribution in a dataset would\n            have an index of \"0,\" the second would have \"1\", etc.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/{datasetId}/{index}\".format(**{\n            \"datasetId\": str(oapi.client.format_argument_value(\n                \"datasetId\",\n                dataset_id,\n                style=\"simple\",\n                explode=False,\n            )),\n            \"index\": str(oapi.client.format_argument_value(\n                \"index\",\n                index,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"POST\",\n        json=datastore_resource_query,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            model.JsonOrCsvQueryOkResponse,\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_query_distribution_id_download","title":"get_datastore_query_distribution_id_download","text":"<pre><code>get_datastore_query_distribution_id_download(\n    distribution_id: str,\n    *,\n    format_: str | None = None,\n    resources: (\n        cmsgov.provider_data.v1.model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        cmsgov.provider_data.v1.model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreQuerySorts\n        | None\n    ) = None\n) -&gt; str\n</code></pre> <p>Like the other datastore query GET endpoints, additional parameters may be added by serializing a query JSON object (documented in the POST endpoints) into a query string.</p> <p>Parameters:</p> <ul> <li> <code>distribution_id</code>               (<code>str</code>)           \u2013            <p>A distribution ID</p> </li> <li> <code>format_</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Response format. Currently, only csv is supported.</p> </li> <li> <code>resources</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryResources | None</code>, default:                   <code>None</code> )           \u2013            <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> </li> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryProperties | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditions | None</code>, default:                   <code>None</code> )           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>joins</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryJoins | None</code>, default:                   <code>None</code> )           \u2013            <p>Joins</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryGroupings | None</code>, default:                   <code>None</code> )           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuerySorts | None</code>, default:                   <code>None</code> )           \u2013            <p>Result sorting directives.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_query_distribution_id_download(\n    self,\n    distribution_id: str,\n    *,\n    format_: str | None = None,\n    resources: (\n        model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        model.DatastoreQuerySorts\n        | None\n    ) = None,\n) -&gt; str:\n    \"\"\"\n    Like the other datastore query GET endpoints, additional parameters may\n    be added by serializing a query JSON object (documented in the POST\n    endpoints) into a query string.\n\n    Parameters:\n        distribution_id: A distribution ID\n        format_: Response format. Currently, only csv is supported.\n        resources: Resources to query against and aliases. Usually you\n            will add only one resource to this array, but if performing a\n            join, list the primary resource first and then add resources to\n            be used in the joins array.\n        properties:\n        conditions: Conditions or groups of conditions for the query,\n            bound by 'and' operator.\n        joins: Joins\n        groupings: Properties or aliases to group results by.\n        sorts: Result sorting directives.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/{distributionId}/download\".format(**{\n            \"distributionId\": str(oapi.client.format_argument_value(\n                \"distributionId\",\n                distribution_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n        query={\n            \"format\": oapi.client.format_argument_value(\n                \"format\",\n                format_,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"resources\": oapi.client.format_argument_value(\n                \"resources\",\n                resources,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"properties\": oapi.client.format_argument_value(\n                \"properties\",\n                properties,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"conditions\": oapi.client.format_argument_value(\n                \"conditions\",\n                conditions,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"joins\": oapi.client.format_argument_value(\n                \"joins\",\n                joins,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"groupings\": oapi.client.format_argument_value(\n                \"groupings\",\n                groupings,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"sorts\": oapi.client.format_argument_value(\n                \"sorts\",\n                sorts,\n                style=\"deepObject\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_query_dataset_id_index_download","title":"get_datastore_query_dataset_id_index_download","text":"<pre><code>get_datastore_query_dataset_id_index_download(\n    dataset_id: str,\n    index: int,\n    *,\n    format_: str | None = None,\n    resources: (\n        cmsgov.provider_data.v1.model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        cmsgov.provider_data.v1.model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreQuerySorts\n        | None\n    ) = None\n) -&gt; str\n</code></pre> <p>Like the other datastore query GET endpoints, additional parameters may be added by serializing a query JSON object (documented in the POST endpoints) into a query string.</p> <p>Parameters:</p> <ul> <li> <code>dataset_id</code>               (<code>str</code>)           \u2013            <p>A dataset ID</p> </li> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>The index of a distribution in a dataset's distribution array. For instance, the first distribution in a dataset would have an index of \"0,\" the second would have \"1\", etc.</p> </li> <li> <code>format_</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Response format. Currently, only csv is supported.</p> </li> <li> <code>resources</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryResources | None</code>, default:                   <code>None</code> )           \u2013            <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> </li> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryProperties | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditions | None</code>, default:                   <code>None</code> )           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>joins</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryJoins | None</code>, default:                   <code>None</code> )           \u2013            <p>Joins</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryGroupings | None</code>, default:                   <code>None</code> )           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuerySorts | None</code>, default:                   <code>None</code> )           \u2013            <p>Result sorting directives.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_query_dataset_id_index_download(\n    self,\n    dataset_id: str,\n    index: int,\n    *,\n    format_: str | None = None,\n    resources: (\n        model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    sorts: (\n        model.DatastoreQuerySorts\n        | None\n    ) = None,\n) -&gt; str:\n    \"\"\"\n    Like the other datastore query GET endpoints, additional parameters may\n    be added by serializing a query JSON object (documented in the POST\n    endpoints) into a query string.\n\n    Parameters:\n        dataset_id: A dataset ID\n        index: The index of a distribution in a dataset's distribution\n            array. For instance, the first distribution in a dataset would\n            have an index of \"0,\" the second would have \"1\", etc.\n        format_: Response format. Currently, only csv is supported.\n        resources: Resources to query against and aliases. Usually you\n            will add only one resource to this array, but if performing a\n            join, list the primary resource first and then add resources to\n            be used in the joins array.\n        properties:\n        conditions: Conditions or groups of conditions for the query,\n            bound by 'and' operator.\n        joins: Joins\n        groupings: Properties or aliases to group results by.\n        sorts: Result sorting directives.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/query/{datasetId}/{index}/download\".format(**{\n            \"datasetId\": str(oapi.client.format_argument_value(\n                \"datasetId\",\n                dataset_id,\n                style=\"simple\",\n                explode=False,\n            )),\n            \"index\": str(oapi.client.format_argument_value(\n                \"index\",\n                index,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n        query={\n            \"format\": oapi.client.format_argument_value(\n                \"format\",\n                format_,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"resources\": oapi.client.format_argument_value(\n                \"resources\",\n                resources,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"properties\": oapi.client.format_argument_value(\n                \"properties\",\n                properties,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"conditions\": oapi.client.format_argument_value(\n                \"conditions\",\n                conditions,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"joins\": oapi.client.format_argument_value(\n                \"joins\",\n                joins,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"groupings\": oapi.client.format_argument_value(\n                \"groupings\",\n                groupings,\n                style=\"deepObject\",\n                explode=True,\n            ),\n            \"sorts\": oapi.client.format_argument_value(\n                \"sorts\",\n                sorts,\n                style=\"deepObject\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response, coerce_unparseable=str),\n        types=(\n            sob.StringProperty(),\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_datastore_sql","title":"get_datastore_sql","text":"<pre><code>get_datastore_sql(\n    query: str, *, show_db_columns: bool | None = None\n) -&gt; cmsgov.provider_data.v1.model.DatastoreSqlGetResponse\n</code></pre> <p>Interact with resources in the datastore using an SQL-like syntax.</p> <p>Parameters:</p> <ul> <li> <code>query</code>               (<code>str</code>)           \u2013            <p>A SQL-like query. A <code>SELECT</code> using the <code>show_db_columns</code> parameter will make it easier to build queries against the data as it returns columns without spaces and in some cases, truncated names where the human readable column header is very long. <code>/api/1/datastore/sql?query=[SELECT * FROM DATASTORE_UUID][ LIMIT 1 OFFSET 0];&amp;show_db_columns</code> You can then build the <code>SELECT</code> part of the query. Do not use spaces between its arguments. <code>/api/1/datastore/sql?query=[SELECT a,b,c, FROM DATASTORE_UUID]</code> <code>WHERE</code> can use any column in the data. <code>/api/1/datastore/sql?query=[SELECT a,b FROM DATASTORE_UUID][ WHERE c = \"CCC\"];&amp;show_db_columns</code> <code>LIMIT</code> and <code>OFFSET</code> allow you to get more than the 500 record limit, by using successive queries: <code>/api/1/datastore/sql?query=[SELECT a,b,c FROM DATASTORE_UUID][ WHERE d = \"CCC\"][LIMIT 500 OFFSET 0];&amp;show_db_columns</code> <code>/api/1/datastore/sql?query=[SELECT a,b,c FROM DATASTORE_UUID][ WHERE d = \"DDD\"][LIMIT 500 OFFSET 500];&amp;show_db_columns</code> Note: <code>SELECT</code>, <code>WHERE</code> and <code>LIMIT...OFFSET</code> clauses must each be included within brackets <code>[ ]</code>.</p> </li> <li> <code>show_db_columns</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Add <code>&amp;show_db_columns</code> to return columns without spaces and in some cases, truncated names where the human readable column header is very long.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_datastore_sql(\n    self,\n    query: str,\n    *,\n    show_db_columns: bool | None = None,\n) -&gt; model.DatastoreSqlGetResponse:\n    \"\"\"\n    Interact with resources in the datastore using an SQL-like syntax.\n\n    Parameters:\n        query: A SQL-like query.\n            A `SELECT` using the `show_db_columns` parameter will make it\n            easier to build queries against the data as\n            it returns columns without spaces and in some cases, truncated\n            names where the human readable column header\n            is very long.\n            `/api/1/datastore/sql?query=[SELECT * FROM DATASTORE_UUID][\n            LIMIT 1 OFFSET 0];&amp;show_db_columns`\n            You can then build the `SELECT` part of the query. Do not use\n            spaces between its arguments.\n            `/api/1/datastore/sql?query=[SELECT a,b,c, FROM DATASTORE_UUID]\n            `\n            `WHERE` can use any column in the data.\n            `/api/1/datastore/sql?query=[SELECT a,b FROM DATASTORE_UUID][\n            WHERE c = \"CCC\"];&amp;show_db_columns`\n            `LIMIT` and `OFFSET` allow you to get more than the 500 record\n            limit, by using successive queries:\n            `/api/1/datastore/sql?query=[SELECT a,b,c FROM DATASTORE_UUID][\n            WHERE d = \"CCC\"][LIMIT 500 OFFSET 0];&amp;show_db_columns`\n            `/api/1/datastore/sql?query=[SELECT a,b,c FROM DATASTORE_UUID][\n            WHERE d = \"DDD\"][LIMIT 500 OFFSET 500];&amp;show_db_columns`\n            Note: `SELECT`, `WHERE` and `LIMIT...OFFSET` clauses must each\n            be included within brackets `[ ]`.\n        show_db_columns: Add `&amp;show_db_columns` to return columns\n            without spaces and in some cases, truncated names where the\n            human\n            readable column header is very long.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/datastore/sql\",\n        method=\"GET\",\n        query={\n            \"query\": oapi.client.format_argument_value(\n                \"query\",\n                query,\n                style=\"form\",\n                explode=True,\n            ),\n            \"show_db_columns\": oapi.client.format_argument_value(\n                \"show_db_columns\",\n                show_db_columns,\n                style=\"form\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.DatastoreSqlGetResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_harvest_plans","title":"get_harvest_plans","text":"<pre><code>get_harvest_plans() -&gt; (\n    cmsgov.provider_data.v1.model.HarvestPlansGetResponse\n)\n</code></pre> <p>Lists the identifiers of all registered harvests.</p> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_harvest_plans(\n    self,\n) -&gt; model.HarvestPlansGetResponse:\n    \"\"\"\n    Lists the identifiers of all registered harvests.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/harvest/plans\",\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.HarvestPlansGetResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_harvest_plans","title":"post_harvest_plans","text":"<pre><code>post_harvest_plans(\n    harvest_plan: cmsgov.provider_data.v1.model.HarvestPlan,\n) -&gt; cmsgov.provider_data.v1.model.HarvestPlansPostResponse\n</code></pre> <p>Registers a new harvest, after validating against our schema.</p> <p>Parameters:</p> <ul> <li> <code>harvest_plan</code>               (<code>cmsgov.provider_data.v1.model.HarvestPlan</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_harvest_plans(\n    self,\n    harvest_plan: (\n        model.HarvestPlan\n    ),\n) -&gt; model.HarvestPlansPostResponse:\n    \"\"\"\n    Registers a new harvest, after validating against our schema.\n\n    Parameters:\n        harvest_plan:\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/harvest/plans\",\n        method=\"POST\",\n        json=harvest_plan,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.HarvestPlansPostResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_harvest_plans_plan_id","title":"get_harvest_plans_plan_id","text":"<pre><code>get_harvest_plans_plan_id(\n    plan_id: str,\n) -&gt; cmsgov.provider_data.v1.model.HarvestPlan\n</code></pre> <p>Get the json plan of a registered harvest, based on the its harvest id.</p> <p>Parameters:</p> <ul> <li> <code>plan_id</code>               (<code>str</code>)           \u2013            <p>A harvest plan identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_harvest_plans_plan_id(\n    self,\n    plan_id: str,\n) -&gt; model.HarvestPlan:\n    \"\"\"\n    Get the json plan of a registered harvest, based on the its harvest id.\n\n    Parameters:\n        plan_id: A harvest plan identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/harvest/plans/{plan_id}\".format(**{\n            \"plan_id\": str(oapi.client.format_argument_value(\n                \"plan_id\",\n                plan_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.HarvestPlan,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_harvest_runs_run_id","title":"get_harvest_runs_run_id","text":"<pre><code>get_harvest_runs_run_id(run_id: str) -&gt; sob.abc.Dictionary\n</code></pre> <p>Gives information about a previous run for a specific harvest run.</p> <p>Parameters:</p> <ul> <li> <code>run_id</code>               (<code>str</code>)           \u2013            <p>A harvest run identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_harvest_runs_run_id(\n    self,\n    run_id: str,\n) -&gt; sob.abc.Dictionary:\n    \"\"\"\n    Gives information about a previous run for a specific harvest run.\n\n    Parameters:\n        run_id: A harvest run identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/harvest/runs/{run_id}\".format(**{\n            \"run_id\": str(oapi.client.format_argument_value(\n                \"run_id\",\n                run_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            sob.Dictionary,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_harvest_runs","title":"get_harvest_runs","text":"<pre><code>get_harvest_runs(\n    plan: str,\n) -&gt; cmsgov.provider_data.v1.model.HarvestRunsGetResponse\n</code></pre> <p>Lists the identifiers (timestamps) of previous runs for a particular harvest id.</p> <p>Parameters:</p> <ul> <li> <code>plan</code>               (<code>str</code>)           \u2013            <p>A harvest plan identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_harvest_runs(\n    self,\n    plan: str,\n) -&gt; model.HarvestRunsGetResponse:\n    \"\"\"\n    Lists the identifiers (timestamps) of previous runs for a particular\n    harvest id.\n\n    Parameters:\n        plan: A harvest plan identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/harvest/runs\",\n        method=\"GET\",\n        query={\n            \"plan\": oapi.client.format_argument_value(\n                \"plan\",\n                plan,\n                style=\"form\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.HarvestRunsGetResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_harvest_runs","title":"post_harvest_runs","text":"<pre><code>post_harvest_runs(\n    harvest_runs_post_request: cmsgov.provider_data.v1.model.HarvestRunsPostRequest,\n) -&gt; cmsgov.provider_data.v1.model.HarvestRunsPostResponse\n</code></pre> <p>Runs a harvest for a specific plan identifier inside json object payload.</p> <p>Parameters:</p> <ul> <li> <code>harvest_runs_post_request</code>               (<code>cmsgov.provider_data.v1.model.HarvestRunsPostRequest</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_harvest_runs(\n    self,\n    harvest_runs_post_request: (\n        model.HarvestRunsPostRequest\n    ),\n) -&gt; model.HarvestRunsPostResponse:\n    \"\"\"\n    Runs a harvest for a specific plan identifier inside json object\n    payload.\n\n    Parameters:\n        harvest_runs_post_request:\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/harvest/runs\",\n        method=\"POST\",\n        json=harvest_runs_post_request,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.HarvestRunsPostResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_metastore_schemas","title":"get_metastore_schemas","text":"<pre><code>get_metastore_schemas() -&gt; sob.abc.Dictionary\n</code></pre> <p>Get list of all schemas</p> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_metastore_schemas(\n    self,\n) -&gt; sob.abc.Dictionary:\n    \"\"\"\n    Get list of all schemas\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas\",\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            sob.Dictionary,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_metastore_schemas_schema_id","title":"get_metastore_schemas_schema_id","text":"<pre><code>get_metastore_schemas_schema_id(\n    schema_id: str,\n) -&gt; sob.abc.Dictionary\n</code></pre> <p>Get a specific schema</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The name a of a specific schema. For instance, \" dataset.\"</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_metastore_schemas_schema_id(\n    self,\n    schema_id: str,\n) -&gt; sob.abc.Dictionary:\n    \"\"\"\n    Get a specific schema\n\n    Parameters:\n        schema_id: The name a of a specific schema. For instance, \"\n            dataset.\"\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/{schema_id}\".format(**{\n            \"schema_id\": str(oapi.client.format_argument_value(\n                \"schema_id\",\n                schema_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            sob.Dictionary,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_metastore_schemas_schema_id_items","title":"get_metastore_schemas_schema_id_items","text":"<pre><code>get_metastore_schemas_schema_id_items(\n    schema_id: str,\n    *,\n    show_reference_ids: bool | None = None\n) -&gt; (\n    cmsgov.provider_data.v1.model.MetastoreSchemasSchemaIdItemsGetResponse\n)\n</code></pre> <p>Get all items for a specific schema (e.g., \"dataset\")</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The name a of a specific schema. For instance, \" dataset.\"</p> </li> <li> <code>show_reference_ids</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Metastore objects often include references to other objects stored in other schemas. These references are usually hidden in responses. Some identifiers are necessary to work with other API endpoints (e.g. datastore endpoints may require the distribution identifier). Add <code>?show-reference-ids</code> to show the identifiers generated by DKAN.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_metastore_schemas_schema_id_items(\n    self,\n    schema_id: str,\n    *,\n    show_reference_ids: bool | None = None,\n) -&gt; model.MetastoreSchemasSchemaIdItemsGetResponse:\n    \"\"\"\n    Get all items for a specific schema (e.g., \"dataset\")\n\n    Parameters:\n        schema_id: The name a of a specific schema. For instance, \"\n            dataset.\"\n        show_reference_ids: Metastore objects often include references\n            to other objects stored in other schemas. These references are\n            usually hidden in responses. Some identifiers are necessary to\n            work with other API endpoints (e.g. datastore endpoints may\n            require the distribution identifier). Add `?show-reference-ids`\n            to show the identifiers generated by DKAN.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/{schema_id}/items\".format(**{\n            \"schema_id\": str(oapi.client.format_argument_value(\n                \"schema_id\",\n                schema_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n        query={\n            \"show-reference-ids\": oapi.client.format_argument_value(\n                \"show-reference-ids\",\n                show_reference_ids,\n                style=\"form\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreSchemasSchemaIdItemsGetResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_metastore_schemas_schema_id_items_identifier_revisions","title":"get_metastore_schemas_schema_id_items_identifier_revisions","text":"<pre><code>get_metastore_schemas_schema_id_items_identifier_revisions(\n    schema_id: str, identifier: str\n) -&gt; (\n    cmsgov.provider_data.v1.model.MetastoreSchemasSchemaIdItemsIdentifierRevisionsGetResponse\n)\n</code></pre> <p>Get all revisions for an item.</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The name a of a specific schema. For instance, \" dataset.\"</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_metastore_schemas_schema_id_items_identifier_revisions(\n    self,\n    schema_id: str,\n    identifier: str,\n) -&gt; model.MetastoreSchemasSchemaIdItemsIdentifierRevisionsGetResponse:\n    \"\"\"\n    Get all revisions for an item.\n\n    Parameters:\n        schema_id: The name a of a specific schema. For instance, \"\n            dataset.\"\n        identifier: A dataset identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/{schema_id}/items/{identifier}/revisions\".format(**{  # noqa: E501\n            \"schema_id\": str(oapi.client.format_argument_value(\n                \"schema_id\",\n                schema_id,\n                style=\"simple\",\n                explode=False,\n            )),\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreSchemasSchemaIdItemsIdentifierRevisionsGetResponse,  # noqa: E501\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.post_metastore_schemas_schema_id_items_identifier_revisions","title":"post_metastore_schemas_schema_id_items_identifier_revisions","text":"<pre><code>post_metastore_schemas_schema_id_items_identifier_revisions(\n    metastore_schema_revision_post_request: cmsgov.provider_data.v1.model.MetastoreSchemaRevisionPostRequest,\n    schema_id: str,\n    identifier: str,\n) -&gt; cmsgov.provider_data.v1.model.MetastoreWriteResponse\n</code></pre> <p>Create new item revision/state.</p> <p>Parameters:</p> <ul> <li> <code>metastore_schema_revision_post_request</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemaRevisionPostRequest</code>)           \u2013            </li> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The name a of a specific schema. For instance, \" dataset.\"</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def post_metastore_schemas_schema_id_items_identifier_revisions(\n    self,\n    metastore_schema_revision_post_request: (\n        model.MetastoreSchemaRevisionPostRequest\n    ),\n    schema_id: str,\n    identifier: str,\n) -&gt; model.MetastoreWriteResponse:\n    \"\"\"\n    Create new item revision/state.\n\n    Parameters:\n        metastore_schema_revision_post_request:\n        schema_id: The name a of a specific schema. For instance, \"\n            dataset.\"\n        identifier: A dataset identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/{schema_id}/items/{identifier}/revisions\".format(**{  # noqa: E501\n            \"schema_id\": str(oapi.client.format_argument_value(\n                \"schema_id\",\n                schema_id,\n                style=\"simple\",\n                explode=False,\n            )),\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"POST\",\n        json=metastore_schema_revision_post_request,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreWriteResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_metastore_schemas_schema_id_items_identifier_revisions_revision_id","title":"get_metastore_schemas_schema_id_items_identifier_revisions_revision_id","text":"<pre><code>get_metastore_schemas_schema_id_items_identifier_revisions_revision_id(\n    schema_id: str, identifier: str, revision_id: str\n) -&gt; cmsgov.provider_data.v1.model.MetastoreRevision\n</code></pre> <p>Get all revisions for an item.</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The name a of a specific schema. For instance, \" dataset.\"</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> <li> <code>revision_id</code>               (<code>str</code>)           \u2013            <p>Revision identifier. Use \"identifier\" property from revision object.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_metastore_schemas_schema_id_items_identifier_revisions_revision_id(\n    self,\n    schema_id: str,\n    identifier: str,\n    revision_id: str,\n) -&gt; model.MetastoreRevision:\n    \"\"\"\n    Get all revisions for an item.\n\n    Parameters:\n        schema_id: The name a of a specific schema. For instance, \"\n            dataset.\"\n        identifier: A dataset identifier\n        revision_id: Revision identifier. Use \"identifier\" property\n            from revision object.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/{schema_id}/items/{identifier}/revisions/{revision_id}\".format(**{  # noqa: E501\n            \"schema_id\": str(oapi.client.format_argument_value(\n                \"schema_id\",\n                schema_id,\n                style=\"simple\",\n                explode=False,\n            )),\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n            \"revision_id\": str(oapi.client.format_argument_value(\n                \"revision_id\",\n                revision_id,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreRevision,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_metastore_schemas_dataset_items","title":"get_metastore_schemas_dataset_items","text":"<pre><code>get_metastore_schemas_dataset_items(\n    *, show_reference_ids: bool | None = None\n) -&gt; cmsgov.provider_data.v1.model.Datasets\n</code></pre> <p>Get all datasets.</p> <p>Parameters:</p> <ul> <li> <code>show_reference_ids</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Metastore objects often include references to other objects stored in other schemas. These references are usually hidden in responses. Some identifiers are necessary to work with other API endpoints (e.g. datastore endpoints may require the distribution identifier). Add <code>?show-reference-ids</code> to show the identifiers generated by DKAN.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_metastore_schemas_dataset_items(\n    self,\n    *,\n    show_reference_ids: bool | None = None,\n) -&gt; model.Datasets:\n    \"\"\"\n    Get all datasets.\n\n    Parameters:\n        show_reference_ids: Metastore objects often include references\n            to other objects stored in other schemas. These references are\n            usually hidden in responses. Some identifiers are necessary to\n            work with other API endpoints (e.g. datastore endpoints may\n            require the distribution identifier). Add `?show-reference-ids`\n            to show the identifiers generated by DKAN.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/dataset/items\",\n        method=\"GET\",\n        query={\n            \"show-reference-ids\": oapi.client.format_argument_value(\n                \"show-reference-ids\",\n                show_reference_ids,\n                style=\"form\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.Datasets,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.put_metastore_schemas_dataset_items","title":"put_metastore_schemas_dataset_items","text":"<pre><code>put_metastore_schemas_dataset_items(\n    dataset: cmsgov.provider_data.v1.model.Dataset,\n    identifier: str,\n) -&gt; cmsgov.provider_data.v1.model.MetastoreWriteResponse\n</code></pre> <p>Object will be completely replaced; optional properties not included in the request will be deleted.</p> <p>Automatic example not yet available; try retrieving a dataset via GET, changing values, and pasting to test. If no item exists with the provided identifier, it will be created.</p> <p>Parameters:</p> <ul> <li> <code>dataset</code>               (<code>cmsgov.provider_data.v1.model.Dataset</code>)           \u2013            <p>The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def put_metastore_schemas_dataset_items(\n    self,\n    dataset: (\n        model.Dataset\n    ),\n    identifier: str,\n) -&gt; model.MetastoreWriteResponse:\n    \"\"\"\n    Object will be completely replaced; optional properties not included in\n    the request will be deleted.\n\n    Automatic example not yet available; try retrieving a dataset via GET,\n    changing values, and pasting to test. If no item exists with the\n    provided identifier, it will be created.\n\n    Parameters:\n        dataset: The metadata format for all federal open data.\n            Validates a single JSON object entry (as opposed to entire\n            Data.json catalog).\n        identifier: A dataset identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/dataset/items\".format(**{\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"PUT\",\n        json=dataset,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreWriteResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.patch_metastore_schemas_dataset_items","title":"patch_metastore_schemas_dataset_items","text":"<pre><code>patch_metastore_schemas_dataset_items(\n    metastore_schemas_dataset_items_patch_request: cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequest,\n    identifier: str,\n) -&gt; cmsgov.provider_data.v1.model.MetastoreWriteResponse\n</code></pre> <p>Values provided will replace existing values, but required values may be omitted.</p> <p>Automatic example not yet available; try retrieving a dataset via GET, changing values, removing unchanged properties, and pasting to test.</p> <p>Parameters:</p> <ul> <li> <code>metastore_schemas_dataset_items_patch_request</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequest</code>)           \u2013            <p>The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def patch_metastore_schemas_dataset_items(\n    self,\n    metastore_schemas_dataset_items_patch_request: (\n        model.MetastoreSchemasDatasetItemsPatchRequest\n    ),\n    identifier: str,\n) -&gt; model.MetastoreWriteResponse:\n    \"\"\"\n    Values provided will replace existing values, but required values may\n    be omitted.\n\n    Automatic example not yet available; try retrieving a dataset via GET,\n    changing values, removing unchanged properties, and pasting to test.\n\n    Parameters:\n        metastore_schemas_dataset_items_patch_request: The metadata\n            format for all federal open data. Validates a single JSON\n            object entry (as opposed to entire Data.json catalog).\n        identifier: A dataset identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/dataset/items\".format(**{\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"PATCH\",\n        json=metastore_schemas_dataset_items_patch_request,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreWriteResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_metastore_schemas_dataset_items_identifier","title":"get_metastore_schemas_dataset_items_identifier","text":"<pre><code>get_metastore_schemas_dataset_items_identifier(\n    identifier: str,\n    *,\n    show_reference_ids: bool | None = None\n) -&gt; cmsgov.provider_data.v1.model.Dataset\n</code></pre> <p>Get a single dataset.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> <li> <code>show_reference_ids</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Metastore objects often include references to other objects stored in other schemas. These references are usually hidden in responses. Some identifiers are necessary to work with other API endpoints (e.g. datastore endpoints may require the distribution identifier). Add <code>?show-reference-ids</code> to show the identifiers generated by DKAN.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_metastore_schemas_dataset_items_identifier(\n    self,\n    identifier: str,\n    *,\n    show_reference_ids: bool | None = None,\n) -&gt; model.Dataset:\n    \"\"\"\n    Get a single dataset.\n\n    Parameters:\n        identifier: A dataset identifier\n        show_reference_ids: Metastore objects often include references\n            to other objects stored in other schemas. These references are\n            usually hidden in responses. Some identifiers are necessary to\n            work with other API endpoints (e.g. datastore endpoints may\n            require the distribution identifier). Add `?show-reference-ids`\n            to show the identifiers generated by DKAN.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/dataset/items/{identifier}\".format(**{\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"GET\",\n        query={\n            \"show-reference-ids\": oapi.client.format_argument_value(\n                \"show-reference-ids\",\n                show_reference_ids,\n                style=\"form\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.Dataset,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.put_metastore_schemas_dataset_items_identifier","title":"put_metastore_schemas_dataset_items_identifier","text":"<pre><code>put_metastore_schemas_dataset_items_identifier(\n    dataset: cmsgov.provider_data.v1.model.Dataset,\n    identifier: str,\n) -&gt; cmsgov.provider_data.v1.model.MetastoreWriteResponse\n</code></pre> <p>Object will be completely replaced; optional properties not included in the request will be deleted.</p> <p>Automatic example not yet available; try retrieving a dataset via GET, changing values, and pasting to test. If no item exists with the provided identifier, it will be created.</p> <p>Parameters:</p> <ul> <li> <code>dataset</code>               (<code>cmsgov.provider_data.v1.model.Dataset</code>)           \u2013            <p>The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def put_metastore_schemas_dataset_items_identifier(\n    self,\n    dataset: (\n        model.Dataset\n    ),\n    identifier: str,\n) -&gt; model.MetastoreWriteResponse:\n    \"\"\"\n    Object will be completely replaced; optional properties not included in\n    the request will be deleted.\n\n    Automatic example not yet available; try retrieving a dataset via GET,\n    changing values, and pasting to test. If no item exists with the\n    provided identifier, it will be created.\n\n    Parameters:\n        dataset: The metadata format for all federal open data.\n            Validates a single JSON object entry (as opposed to entire\n            Data.json catalog).\n        identifier: A dataset identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/dataset/items/{identifier}\".format(**{\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"PUT\",\n        json=dataset,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreWriteResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.patch_metastore_schemas_dataset_items_identifier","title":"patch_metastore_schemas_dataset_items_identifier","text":"<pre><code>patch_metastore_schemas_dataset_items_identifier(\n    metastore_schemas_dataset_items_identifier_patch_request: cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequest,\n    identifier: str,\n) -&gt; cmsgov.provider_data.v1.model.MetastoreWriteResponse\n</code></pre> <p>Values provided will replace existing values, but required values may be omitted.</p> <p>Automatic example not yet available; try retrieving a dataset via GET, changing values, removing unchanged properties, and pasting to test.</p> <p>Parameters:</p> <ul> <li> <code>metastore_schemas_dataset_items_identifier_patch_request</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequest</code>)           \u2013            <p>The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>A dataset identifier</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def patch_metastore_schemas_dataset_items_identifier(\n    self,\n    metastore_schemas_dataset_items_identifier_patch_request: (\n        model.MetastoreSchemasDatasetItemsIdentifierPatchRequest\n    ),\n    identifier: str,\n) -&gt; model.MetastoreWriteResponse:\n    \"\"\"\n    Values provided will replace existing values, but required values may\n    be omitted.\n\n    Automatic example not yet available; try retrieving a dataset via GET,\n    changing values, removing unchanged properties, and pasting to test.\n\n    Parameters:\n        metastore_schemas_dataset_items_identifier_patch_request: The\n            metadata format for all federal open data. Validates a single\n            JSON object entry (as opposed to entire Data.json catalog).\n        identifier: A dataset identifier\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/metastore/schemas/dataset/items/{identifier}\".format(**{\n            \"identifier\": str(oapi.client.format_argument_value(\n                \"identifier\",\n                identifier,\n                style=\"simple\",\n                explode=False,\n            )),\n        }),\n        method=\"PATCH\",\n        json=metastore_schemas_dataset_items_identifier_patch_request,\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.MetastoreWriteResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_search","title":"get_search","text":"<pre><code>get_search(\n    *,\n    fulltext: str | None = None,\n    page: int | None = None,\n    page_size: int | None = None,\n    sort: (\n        cmsgov.provider_data.v1.model.SortSearch | None\n    ) = None,\n    sort_order: (\n        cmsgov.provider_data.v1.model.SortSearchOrder | None\n    ) = None,\n    facets: str | None = None,\n    theme: str | None = None,\n    keyword: str | None = None\n) -&gt; cmsgov.provider_data.v1.model.SearchGetResponse\n</code></pre> <p>Search description.</p> <p>Parameters:</p> <ul> <li> <code>fulltext</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Full-text search to run against any metadata fields indexed for fulltext searches.</p> </li> <li> <code>page</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The page of the result set.</p> </li> <li> <code>page_size</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>How many results per page.</p> </li> <li> <code>sort</code>               (<code>cmsgov.provider_data.v1.model.SortSearch | None</code>, default:                   <code>None</code> )           \u2013            <p>Which property to sort results on. Available properties : access_level, description, keyword, modified, theme, title, title_string, search_api_relevance</p> </li> <li> <code>sort_order</code>               (<code>cmsgov.provider_data.v1.model.SortSearchOrder | None</code>, default:                   <code>None</code> )           \u2013            <p>Sort results in ascending or descending order. Allowed values: asc, desc</p> </li> <li> <code>facets</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Request information on facets. Pass a comma-separated list to get specific facets. Pass an empty value or \"0\" for no facet infrmation. Omit this parameter to get all facet information.</p> </li> <li> <code>theme</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Filter results using theme facet.</p> </li> <li> <code>keyword</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Filter results using keyword&lt;/ em&gt; facet. Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_search(\n    self,\n    *,\n    fulltext: str | None = None,\n    page: int | None = None,\n    page_size: int | None = None,\n    sort: (\n        model.SortSearch\n        | None\n    ) = None,\n    sort_order: (\n        model.SortSearchOrder\n        | None\n    ) = None,\n    facets: str | None = None,\n    theme: str | None = None,\n    keyword: str | None = None,\n) -&gt; model.SearchGetResponse:\n    \"\"\"\n    Search description.\n\n    Parameters:\n        fulltext: Full-text search to run against any metadata fields\n            indexed for fulltext searches.\n        page: The page of the result set.\n        page_size: How many results per page.\n        sort: Which property to sort results on. Available properties\n            : &lt;em class=\"placeholder\"&gt;access_level, description, keyword,\n            modified, theme, title, title_string, search_api_relevance&lt;/em&gt;\n        sort_order: Sort results in ascending or descending order.\n            Allowed values: &lt;em&gt;asc, desc&lt;/em&gt;\n        facets: Request information on facets. Pass a comma-separated\n            list to get specific facets. Pass an empty value or \"0\" for no\n            facet infrmation. Omit this parameter to get all facet\n            information.\n        theme: Filter results using &lt;em class=\"placeholder\"&gt;theme&lt;/em&gt;\n            facet.\n        keyword: Filter results using &lt;em class=\"placeholder\"&gt;keyword&lt;/\n            em&gt; facet.\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/search\",\n        method=\"GET\",\n        query={\n            \"fulltext\": oapi.client.format_argument_value(\n                \"fulltext\",\n                fulltext,\n                style=\"form\",\n                explode=True,\n            ),\n            \"page\": oapi.client.format_argument_value(\n                \"page\",\n                page,\n                style=\"form\",\n                explode=True,\n            ),\n            \"page-size\": oapi.client.format_argument_value(\n                \"page-size\",\n                page_size,\n                style=\"form\",\n                explode=True,\n            ),\n            \"sort\": oapi.client.format_argument_value(\n                \"sort\",\n                sort,\n                style=\"form\",\n                explode=False,\n            ),\n            \"sort-order\": oapi.client.format_argument_value(\n                \"sort-order\",\n                sort_order,\n                style=\"form\",\n                explode=False,\n            ),\n            \"facets\": oapi.client.format_argument_value(\n                \"facets\",\n                facets,\n                style=\"form\",\n                explode=False,\n            ),\n            \"theme\": oapi.client.format_argument_value(\n                \"theme\",\n                theme,\n                style=\"form\",\n                explode=True,\n            ),\n            \"keyword\": oapi.client.format_argument_value(\n                \"keyword\",\n                keyword,\n                style=\"form\",\n                explode=True,\n            ),\n        },\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.SearchGetResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/client/#cmsgov.provider_data.v1.client.Client.get_search_facets","title":"get_search_facets","text":"<pre><code>get_search_facets() -&gt; (\n    cmsgov.provider_data.v1.model.SearchFacetsGetResponse\n)\n</code></pre> <p>Retrieve search facet information</p> Source code in <code>src/cmsgov/provider_data/v1/client.py</code> <pre><code>def get_search_facets(\n    self,\n) -&gt; model.SearchFacetsGetResponse:\n    \"\"\"\n    Retrieve search facet information\n    \"\"\"\n    response: sob.abc.Readable = self.request(\n        \"/search/facets\",\n        method=\"GET\",\n    )\n    return sob.unmarshal(  # type: ignore\n        sob.deserialize(response),\n        types=(\n            model.SearchFacetsGetResponse,\n        )\n    )\n</code></pre>"},{"location":"api/provider_data/v1/model/","title":"v1.model","text":""},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model","title":"cmsgov.provider_data.v1.model","text":""},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponse","title":"JsonOrCsvQueryOkResponse","text":"<pre><code>JsonOrCsvQueryOkResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    results: (\n        cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponseResults\n        | None\n    ) = None,\n    count: int | None = None,\n    schema: sob.Array | sob.Dictionary | None = None,\n    query: sob.Dictionary | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>results</code>               (<code>cmsgov.provider_data.v1.model.JsonOrCsvQueryOkResponseResults | None</code>)           \u2013            </li> <li> <code>count</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>schema</code>               (<code>sob.Array | sob.Dictionary | None</code>)           \u2013            </li> <li> <code>query</code>               (<code>sob.Dictionary | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    results: (\n        JsonOrCsvQueryOkResponseResults\n        | None\n    ) = None,\n    count: (\n        int\n        | None\n    ) = None,\n    schema: (\n        sob.Array\n        | sob.Dictionary\n        | None\n    ) = None,\n    query: (\n        sob.Dictionary\n        | None\n    ) = None\n) -&gt; None:\n    self.results: (\n        JsonOrCsvQueryOkResponseResults\n        | None\n    ) = results\n    self.count: (\n        int\n        | None\n    ) = count\n    self.schema: (\n        sob.Array\n        | sob.Dictionary\n        | None\n    ) = schema\n    self.query: (\n        sob.Dictionary\n        | None\n    ) = query\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.Dataset","title":"Dataset","text":"<pre><code>Dataset(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    title: str | None = None,\n    identifier: str | None = None,\n    description: str | None = None,\n    access_level: str | None = None,\n    rights: str | sob.Null | None = None,\n    accrual_periodicity: str | None = None,\n    described_by: str | None = None,\n    described_by_type: str | None = None,\n    issued: str | None = None,\n    modified: str | None = None,\n    released: str | None = None,\n    next_update_date: str | None = None,\n    license_: str | None = None,\n    spatial: str | None = None,\n    temporal: str | None = None,\n    is_part_of: str | None = None,\n    publisher: (\n        cmsgov.provider_data.v1.model.DatasetPublisher\n        | None\n    ) = None,\n    bureau_code: (\n        cmsgov.provider_data.v1.model.DatasetBureauCode\n        | None\n    ) = None,\n    program_code: (\n        cmsgov.provider_data.v1.model.DatasetProgramCode\n        | None\n    ) = None,\n    contact_point: (\n        cmsgov.provider_data.v1.model.DatasetContactPoint\n        | sob.Dictionary\n        | None\n    ) = None,\n    theme: (\n        cmsgov.provider_data.v1.model.DatasetTheme | None\n    ) = None,\n    keyword: (\n        cmsgov.provider_data.v1.model.DatasetKeyword | None\n    ) = None,\n    distribution: (\n        cmsgov.provider_data.v1.model.DatasetDistributions\n        | None\n    ) = None,\n    references: (\n        cmsgov.provider_data.v1.model.DatasetReferences\n        | None\n    ) = None,\n    archive_exclude: bool | None = None,\n    landing_page: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be dcat:Dataset for each Dataset.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>Human-readable name of the asset. Should be in plain English and include sufficient detail to facilitate search and discovery.</p> </li> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            <p>A unique identifier for the dataset or API as maintained within an Agency catalog or database.</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>Human-readable description (e.g., an abstract) with sufficient detail to enable a user to quickly understand whether the asset is of interest.</p> </li> <li> <code>access_level</code>               (<code>str | None</code>)           \u2013            <p>The degree to which this dataset could be made publicly-available, regardless of whether it has been made available. Choices: public (Data asset is or could be made publicly available to all without restrictions), restricted public (Data asset is available under certain use restrictions), or non-public ( Data asset is not available to members of the public).</p> </li> <li> <code>rights</code>               (<code>str | sob.Null | None</code>)           \u2013            <p>This may include information regarding access or restrictions based on privacy, security, or other policies. This should also provide an explanation for the selected \"accessLevel\" including instructions for how to access a restricted file, if applicable, or explanation for why a \"non-public\" or \"restricted public\" data assetis not \"public,\" if applicable. Text, 255 characters.</p> </li> <li> <code>accrual_periodicity</code>               (<code>str | None</code>)           \u2013            <p>Frequency with which dataset is published.</p> </li> <li> <code>described_by</code>               (<code>str | None</code>)           \u2013            <p>URL to the data dictionary for the dataset or API. Note that documentation other than a data dictionary can be referenced using Related Documents as shown in the expanded fields.</p> </li> <li> <code>described_by_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.</p> </li> <li> <code>issued</code>               (<code>str | None</code>)           \u2013            <p>Date of formal issuance.</p> </li> <li> <code>modified</code>               (<code>str | None</code>)           \u2013            <p>Most recent date on which the dataset was changed, updated or modified.</p> </li> <li> <code>released</code>               (<code>str | None</code>)           \u2013            <p>Date on which the dataset is scheduled to be published.</p> </li> <li> <code>next_update_date</code>               (<code>str | None</code>)           \u2013            <p>The date on which the dataset is expected to be updated next.</p> </li> <li> <code>license_</code>               (<code>str | None</code>)           \u2013            <p>The license dataset or API is published with. See Open Licenses&lt;/ a&gt; for more information. <li> <code>spatial</code>               (<code>str | None</code>)           \u2013            <p>The spatial coverage of the dataset. Could include a spatial region like a bounding box or a named place.</p> </li> <li> <code>temporal</code>               (<code>str | None</code>)           \u2013            <p>The start and end dates for which the dataset is applicable, separated by a \"/\" (i.e., 2000-01-15T00:45:00Z/2010-01- 15T00:06:00Z).</p> </li> <li> <code>is_part_of</code>               (<code>str | None</code>)           \u2013            <p>The collection of which the dataset is a subset.</p> </li> <li> <code>publisher</code>               (<code>cmsgov.provider_data.v1.model.DatasetPublisher | None</code>)           \u2013            <p>A Dataset Publisher Organization.</p> </li> <li> <code>bureau_code</code>               (<code>cmsgov.provider_data.v1.model.DatasetBureauCode | None</code>)           \u2013            <p>Federal agencies, combined agency and bureau code from  OMB Circular A-11, Appendix C in the format of <code>015:010</code>.</p> </li> <li> <code>program_code</code>               (<code>cmsgov.provider_data.v1.model.DatasetProgramCode | None</code>)           \u2013            <p>Federal agencies, list the primary program related to this data asset, from the Federal Program Inventory. Use the format of <code>015:001</code></p> </li> <li> <code>contact_point</code>               (<code>cmsgov.provider_data.v1.model.DatasetContactPoint | sob.Dictionary | None</code>)           \u2013            <p>A Dataset ContactPoint as a vCard object.</p> </li> <li> <code>theme</code>               (<code>cmsgov.provider_data.v1.model.DatasetTheme | None</code>)           \u2013            <p>Main thematic category of the dataset.</p> </li> <li> <code>keyword</code>               (<code>cmsgov.provider_data.v1.model.DatasetKeyword | None</code>)           \u2013            <p>Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non- technical users.</p> </li> <li> <code>distribution</code>               (<code>cmsgov.provider_data.v1.model.DatasetDistributions | None</code>)           \u2013            <p>A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.</p> </li> <li> <code>references</code>               (<code>cmsgov.provider_data.v1.model.DatasetReferences | None</code>)           \u2013            <p>Related documents such as technical information about a dataset, developer documentation, etc.</p> </li> <li> <code>archive_exclude</code>               (<code>bool | None</code>)           \u2013            <p>For excluding this dataset from its provider's ' download all datasets'.</p> </li> <li> <code>landing_page</code>               (<code>str | None</code>)           \u2013            </li> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    title: (\n        str\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None,\n    description: (\n        str\n        | None\n    ) = None,\n    access_level: (\n        str\n        | None\n    ) = None,\n    rights: (\n        str\n        | sob.Null\n        | None\n    ) = None,\n    accrual_periodicity: (\n        str\n        | None\n    ) = None,\n    described_by: (\n        str\n        | None\n    ) = None,\n    described_by_type: (\n        str\n        | None\n    ) = None,\n    issued: (\n        str\n        | None\n    ) = None,\n    modified: (\n        str\n        | None\n    ) = None,\n    released: (\n        str\n        | None\n    ) = None,\n    next_update_date: (\n        str\n        | None\n    ) = None,\n    license_: (\n        str\n        | None\n    ) = None,\n    spatial: (\n        str\n        | None\n    ) = None,\n    temporal: (\n        str\n        | None\n    ) = None,\n    is_part_of: (\n        str\n        | None\n    ) = None,\n    publisher: (\n        DatasetPublisher\n        | None\n    ) = None,\n    bureau_code: (\n        DatasetBureauCode\n        | None\n    ) = None,\n    program_code: (\n        DatasetProgramCode\n        | None\n    ) = None,\n    contact_point: (\n        DatasetContactPoint\n        | sob.Dictionary\n        | None\n    ) = None,\n    theme: (\n        DatasetTheme\n        | None\n    ) = None,\n    keyword: (\n        DatasetKeyword\n        | None\n    ) = None,\n    distribution: (\n        DatasetDistributions\n        | None\n    ) = None,\n    references: (\n        DatasetReferences\n        | None\n    ) = None,\n    archive_exclude: (\n        bool\n        | None\n    ) = None,\n    landing_page: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.title: (\n        str\n        | None\n    ) = title\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    self.description: (\n        str\n        | None\n    ) = description\n    self.access_level: (\n        str\n        | None\n    ) = access_level\n    self.rights: (\n        str\n        | sob.Null\n        | None\n    ) = rights\n    self.accrual_periodicity: (\n        str\n        | None\n    ) = accrual_periodicity\n    self.described_by: (\n        str\n        | None\n    ) = described_by\n    self.described_by_type: (\n        str\n        | None\n    ) = described_by_type\n    self.issued: (\n        str\n        | None\n    ) = issued\n    self.modified: (\n        str\n        | None\n    ) = modified\n    self.released: (\n        str\n        | None\n    ) = released\n    self.next_update_date: (\n        str\n        | None\n    ) = next_update_date\n    self.license_: (\n        str\n        | None\n    ) = license_\n    self.spatial: (\n        str\n        | None\n    ) = spatial\n    self.temporal: (\n        str\n        | None\n    ) = temporal\n    self.is_part_of: (\n        str\n        | None\n    ) = is_part_of\n    self.publisher: (\n        DatasetPublisher\n        | None\n    ) = publisher\n    self.bureau_code: (\n        DatasetBureauCode\n        | None\n    ) = bureau_code\n    self.program_code: (\n        DatasetProgramCode\n        | None\n    ) = program_code\n    self.contact_point: (\n        DatasetContactPoint\n        | sob.Dictionary\n        | None\n    ) = contact_point\n    self.theme: (\n        DatasetTheme\n        | None\n    ) = theme\n    self.keyword: (\n        DatasetKeyword\n        | None\n    ) = keyword\n    self.distribution: (\n        DatasetDistributions\n        | None\n    ) = distribution\n    self.references: (\n        DatasetReferences\n        | None\n    ) = references\n    self.archive_exclude: (\n        bool\n        | None\n    ) = archive_exclude\n    self.landing_page: (\n        str\n        | None\n    ) = landing_page\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetBureauCode","title":"DatasetBureauCode","text":"<pre><code>DatasetBureauCode(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Federal agencies, combined agency and bureau code from  OMB Circular A-11, Appendix C in the format of <code>015:010</code>.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetContactPoint","title":"DatasetContactPoint","text":"<pre><code>DatasetContactPoint(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    fn: str | None = None,\n    has_email: str | None = None,\n    has_url: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>A Dataset ContactPoint as a vCard object.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be vcard:Contact for contactPoint.</p> </li> <li> <code>fn</code>               (<code>str | None</code>)           \u2013            <p>A full formatted name, e.g. Firstname Lastname.</p> </li> <li> <code>has_email</code>               (<code>str | None</code>)           \u2013            <p>Email address for the contact name.</p> </li> <li> <code>has_url</code>               (<code>str | None</code>)           \u2013            <p>URL for the contact</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    fn: (\n        str\n        | None\n    ) = None,\n    has_email: (\n        str\n        | None\n    ) = None,\n    has_url: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.fn: (\n        str\n        | None\n    ) = fn\n    self.has_email: (\n        str\n        | None\n    ) = has_email\n    self.has_url: (\n        str\n        | None\n    ) = has_url\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetDistributions","title":"DatasetDistributions","text":"<pre><code>DatasetDistributions(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.DatasetDistribution\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            DatasetDistribution\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetDistribution","title":"DatasetDistribution","text":"<pre><code>DatasetDistribution(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    title: str | None = None,\n    description: str | None = None,\n    format_: str | None = None,\n    media_type: str | None = None,\n    download_url: str | None = None,\n    access_url: str | None = None,\n    conforms_to: str | None = None,\n    described_by: str | None = None,\n    described_by_type: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be dcat: Distribution for each Distribution.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>Human-readable name of the file.</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>Human-readable description of the file.</p> </li> <li> <code>format_</code>               (<code>str | None</code>)           \u2013            <p>A human-readable description of the file format of a distribution (i.e. csv, pdf, kml, etc.).</p> </li> <li> <code>media_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s downloadURL.</p> </li> <li> <code>download_url</code>               (<code>str | None</code>)           \u2013            <p>URL providing direct access to a downloadable file of a dataset.</p> </li> <li> <code>access_url</code>               (<code>str | None</code>)           \u2013            <p>URL providing indirect access to a dataset.</p> </li> <li> <code>conforms_to</code>               (<code>str | None</code>)           \u2013            <p>URI used to identify a standardized specification the distribution conforms to.</p> </li> <li> <code>described_by</code>               (<code>str | None</code>)           \u2013            <p>URL to the data dictionary for the distribution found at the downloadURL.</p> </li> <li> <code>described_by_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    title: (\n        str\n        | None\n    ) = None,\n    description: (\n        str\n        | None\n    ) = None,\n    format_: (\n        str\n        | None\n    ) = None,\n    media_type: (\n        str\n        | None\n    ) = None,\n    download_url: (\n        str\n        | None\n    ) = None,\n    access_url: (\n        str\n        | None\n    ) = None,\n    conforms_to: (\n        str\n        | None\n    ) = None,\n    described_by: (\n        str\n        | None\n    ) = None,\n    described_by_type: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.title: (\n        str\n        | None\n    ) = title\n    self.description: (\n        str\n        | None\n    ) = description\n    self.format_: (\n        str\n        | None\n    ) = format_\n    self.media_type: (\n        str\n        | None\n    ) = media_type\n    self.download_url: (\n        str\n        | None\n    ) = download_url\n    self.access_url: (\n        str\n        | None\n    ) = access_url\n    self.conforms_to: (\n        str\n        | None\n    ) = conforms_to\n    self.described_by: (\n        str\n        | None\n    ) = described_by\n    self.described_by_type: (\n        str\n        | None\n    ) = described_by_type\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetKeyword","title":"DatasetKeyword","text":"<pre><code>DatasetKeyword(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non-technical users.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetProgramCode","title":"DatasetProgramCode","text":"<pre><code>DatasetProgramCode(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Federal agencies, list the primary program related to this data asset, from the Federal Program Inventory. Use the format of <code>015:001</code></p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetPublisher","title":"DatasetPublisher","text":"<pre><code>DatasetPublisher(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    name: str | None = None,\n    sub_organization_of: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>A Dataset Publisher Organization.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be org: Organization for each publisher</p> </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>sub_organization_of</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    name: (\n        str\n        | None\n    ) = None,\n    sub_organization_of: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.name: (\n        str\n        | None\n    ) = name\n    self.sub_organization_of: (\n        str\n        | None\n    ) = sub_organization_of\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetReferences","title":"DatasetReferences","text":"<pre><code>DatasetReferences(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Related documents such as technical information about a dataset, developer documentation, etc.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatasetTheme","title":"DatasetTheme","text":"<pre><code>DatasetTheme(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Main thematic category of the dataset.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.Datasets","title":"Datasets","text":"<pre><code>Datasets(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.Dataset\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>An array of datasets.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            Dataset\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQuery","title":"DatastoreQuery","text":"<pre><code>DatastoreQuery(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resources: (\n        cmsgov.provider_data.v1.model.DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        cmsgov.provider_data.v1.model.DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreQueryGroupings\n        | None\n    ) = None,\n    limit: int | None = None,\n    offset: int | None = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreQuerySorts\n        | None\n    ) = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Schema for DKAN datastore queries</p> <p>Attributes:</p> <ul> <li> <code>resources</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryResources | None</code>)           \u2013            <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> </li> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryProperties | None</code>)           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditions | None</code>)           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>joins</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryJoins | None</code>)           \u2013            <p>Joins</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryGroupings | None</code>)           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>limit</code>               (<code>int | None</code>)           \u2013            <p>Limit for maximum number of records returned. Pass zero for no limit (may be restricted by user permissions).</p> </li> <li> <code>offset</code>               (<code>int | None</code>)           \u2013            <p>Number of records to offset by or skip before returning first record.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQuerySorts | None</code>)           \u2013            <p>Result sorting directives.</p> </li> <li> <code>count</code>               (<code>bool | None</code>)           \u2013            <p>Return a count of the total rows returned by the query, ignoring the limit/offset.</p> </li> <li> <code>results</code>               (<code>bool | None</code>)           \u2013            <p>Return the result set. Set to false and set count to true to receive only a count of matches.</p> </li> <li> <code>schema</code>               (<code>bool | None</code>)           \u2013            <p>Return the schema for the datastore collection.</p> </li> <li> <code>keys</code>               (<code>bool | None</code>)           \u2013            <p>Return results as an array of keyed objects, with the column machine names as keys. If false, results will be an array of simple arrays of values.</p> </li> <li> <code>format_</code>               (<code>str | None</code>)           \u2013            <p>Format to return data in. Default is JSON, can be set to CSV.</p> </li> <li> <code>row_ids</code>               (<code>bool | None</code>)           \u2013            <p>Flag to include the result_number column in output. Default is FALSE</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resources: (\n        DatastoreQueryResources\n        | None\n    ) = None,\n    properties: (\n        DatastoreQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        DatastoreQueryConditions\n        | None\n    ) = None,\n    joins: (\n        DatastoreQueryJoins\n        | None\n    ) = None,\n    groupings: (\n        DatastoreQueryGroupings\n        | None\n    ) = None,\n    limit: (\n        int\n        | None\n    ) = None,\n    offset: (\n        int\n        | None\n    ) = None,\n    sorts: (\n        DatastoreQuerySorts\n        | None\n    ) = None,\n    count: (\n        bool\n        | None\n    ) = None,\n    results: (\n        bool\n        | None\n    ) = None,\n    schema: (\n        bool\n        | None\n    ) = None,\n    keys: (\n        bool\n        | None\n    ) = None,\n    format_: (\n        str\n        | None\n    ) = None,\n    row_ids: (\n        bool\n        | None\n    ) = None\n) -&gt; None:\n    self.resources: (\n        DatastoreQueryResources\n        | None\n    ) = resources\n    self.properties: (\n        DatastoreQueryProperties\n        | None\n    ) = properties\n    self.conditions: (\n        DatastoreQueryConditions\n        | None\n    ) = conditions\n    self.joins: (\n        DatastoreQueryJoins\n        | None\n    ) = joins\n    self.groupings: (\n        DatastoreQueryGroupings\n        | None\n    ) = groupings\n    self.limit: (\n        int\n        | None\n    ) = limit\n    self.offset: (\n        int\n        | None\n    ) = offset\n    self.sorts: (\n        DatastoreQuerySorts\n        | None\n    ) = sorts\n    self.count: (\n        bool\n        | None\n    ) = count\n    self.results: (\n        bool\n        | None\n    ) = results\n    self.schema: (\n        bool\n        | None\n    ) = schema\n    self.keys: (\n        bool\n        | None\n    ) = keys\n    self.format_: (\n        str\n        | None\n    ) = format_\n    self.row_ids: (\n        bool\n        | None\n    ) = row_ids\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryConditions","title":"DatastoreQueryConditions","text":"<pre><code>DatastoreQueryConditions(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.DatastoreQueryCondition\n            | cmsgov.provider_data.v1.model.DatastoreQueryConditionGroup\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            DatastoreQueryCondition\n            | DatastoreQueryConditionGroup\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryGroupings","title":"DatastoreQueryGroupings","text":"<pre><code>DatastoreQueryGroupings(\n    items: (\n        typing.Iterable[\n            str\n            | cmsgov.provider_data.v1.model.DatastoreQueryResourceProperty\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Properties or aliases to group results by.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n            | DatastoreQueryResourceProperty\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryJoins","title":"DatastoreQueryJoins","text":"<pre><code>DatastoreQueryJoins(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.DatastoreQueryJoinsItem\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Joins</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            DatastoreQueryJoinsItem\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryJoinsItem","title":"DatastoreQueryJoinsItem","text":"<pre><code>DatastoreQueryJoinsItem(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: str | None = None,\n    condition: (\n        cmsgov.provider_data.v1.model.DatastoreQueryCondition\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>resource</code>               (<code>str | None</code>)           \u2013            <p>Alias to resource set in resources array. Not needed when only querying against one resource.</p> </li> <li> <code>condition</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryCondition | None</code>)           \u2013            <p>Condition object including property, value and operator. If querying only one resource, the \"resource\" does not need to be specified.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: (\n        str\n        | None\n    ) = None,\n    condition: (\n        DatastoreQueryCondition\n        | None\n    ) = None\n) -&gt; None:\n    self.resource: (\n        str\n        | None\n    ) = resource\n    self.condition: (\n        DatastoreQueryCondition\n        | None\n    ) = condition\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryPropertyResource","title":"DatastoreQueryPropertyResource","text":"<pre><code>DatastoreQueryPropertyResource(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: str | None = None,\n    property_: str | None = None,\n    alias: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>resource</code>               (<code>str | None</code>)           \u2013            <p>Alias to resource set in resources array. Not needed when only querying against one resource.</p> </li> <li> <code>property_</code>               (<code>str | None</code>)           \u2013            <p>The property/column or alias to filter by. Should not include collection/table alias.</p> </li> <li> <code>alias</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: (\n        str\n        | None\n    ) = None,\n    property_: (\n        str\n        | None\n    ) = None,\n    alias: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.resource: (\n        str\n        | None\n    ) = resource\n    self.property_: (\n        str\n        | None\n    ) = property_\n    self.alias: (\n        str\n        | None\n    ) = alias\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryPropertyExpression","title":"DatastoreQueryPropertyExpression","text":"<pre><code>DatastoreQueryPropertyExpression(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    expression: (\n        cmsgov.provider_data.v1.model.DatastoreQueryExpression\n        | None\n    ) = None,\n    alias: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>expression</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryExpression | None</code>)           \u2013            <p>Arithmetic or aggregate expression performed on one or more properties.</p> </li> <li> <code>alias</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    expression: (\n        DatastoreQueryExpression\n        | None\n    ) = None,\n    alias: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.expression: (\n        DatastoreQueryExpression\n        | None\n    ) = expression\n    self.alias: (\n        str\n        | None\n    ) = alias\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryResources","title":"DatastoreQueryResources","text":"<pre><code>DatastoreQueryResources(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.DatastoreQueryResource\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            DatastoreQueryResource\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryResource","title":"DatastoreQueryResource","text":"<pre><code>DatastoreQueryResource(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    alias: str | None = None,\n    id_: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>alias</code>               (<code>str | None</code>)           \u2013            <p>Alias to use to refer to this resource elsewhere in the query.</p> </li> <li> <code>id_</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    alias: (\n        str\n        | None\n    ) = None,\n    id_: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.alias: (\n        str\n        | None\n    ) = alias\n    self.id_: (\n        str\n        | None\n    ) = id_\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQuerySorts","title":"DatastoreQuerySorts","text":"<pre><code>DatastoreQuerySorts(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.DatastoreQuerySort\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Result sorting directives.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            DatastoreQuerySort\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryCondition","title":"DatastoreQueryCondition","text":"<pre><code>DatastoreQueryCondition(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: str | None = None,\n    property_: str | None = None,\n    value: (\n        sob.Array\n        | str\n        | decimal.Decimal\n        | float\n        | int\n        | cmsgov.provider_data.v1.model.DatastoreQueryConditionValueAnyOf2\n        | cmsgov.provider_data.v1.model.DatastoreQueryResourceProperty\n        | None\n    ) = None,\n    operator: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Condition object including property, value and operator. If querying only one resource, the \"resource\" does not need to be specified.</p> <p>Attributes:</p> <ul> <li> <code>resource</code>               (<code>str | None</code>)           \u2013            <p>Alias to resource set in resources array. Not needed when only querying against one resource.</p> </li> <li> <code>property_</code>               (<code>str | None</code>)           \u2013            <p>The property/column or alias to filter by. Should not include collection/table alias.</p> </li> <li> <code>value</code>               (<code>sob.Array | str | decimal.Decimal | float | int | cmsgov.provider_data.v1.model.DatastoreQueryConditionValueAnyOf2 | cmsgov.provider_data.v1.model.DatastoreQueryResourceProperty | None</code>)           \u2013            <p>The value to filter against.</p> </li> <li> <code>operator</code>               (<code>str | None</code>)           \u2013            <p>Condition operator</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: (\n        str\n        | None\n    ) = None,\n    property_: (\n        str\n        | None\n    ) = None,\n    value: (\n        sob.Array\n        | str\n        | decimal.Decimal\n        | float\n        | int\n        | DatastoreQueryConditionValueAnyOf2\n        | DatastoreQueryResourceProperty\n        | None\n    ) = None,\n    operator: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.resource: (\n        str\n        | None\n    ) = resource\n    self.property_: (\n        str\n        | None\n    ) = property_\n    self.value: (\n        sob.Array\n        | str\n        | decimal.Decimal\n        | float\n        | int\n        | DatastoreQueryConditionValueAnyOf2\n        | DatastoreQueryResourceProperty\n        | None\n    ) = value\n    self.operator: (\n        str\n        | None\n    ) = operator\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryConditionGroup","title":"DatastoreQueryConditionGroup","text":"<pre><code>DatastoreQueryConditionGroup(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    group_operator: str | None = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreQueryConditionGroupConditions\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Group of conditions bound by 'and'/'or' operators.</p> <p>Attributes:</p> <ul> <li> <code>group_operator</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryConditionGroupConditions | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    group_operator: (\n        str\n        | None\n    ) = None,\n    conditions: (\n        DatastoreQueryConditionGroupConditions\n        | None\n    ) = None\n) -&gt; None:\n    self.group_operator: (\n        str\n        | None\n    ) = group_operator\n    self.conditions: (\n        DatastoreQueryConditionGroupConditions\n        | None\n    ) = conditions\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryExpression","title":"DatastoreQueryExpression","text":"<pre><code>DatastoreQueryExpression(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    operator: str | None = None,\n    operands: (\n        cmsgov.provider_data.v1.model.DatastoreQueryExpressionOperands\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Arithmetic or aggregate expression performed on one or more properties.</p> <p>Attributes:</p> <ul> <li> <code>operator</code>               (<code>str | None</code>)           \u2013            <p>Expression operator. Note that performing expressions on text or other non-numeric data types my yield unexpected results.</p> </li> <li> <code>operands</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryExpressionOperands | None</code>)           \u2013            <p>Arithmetic operators will require two operands, aggregate operators should take only one. Do not combine arithmetic and aggregate operators in a single query.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    operator: (\n        str\n        | None\n    ) = None,\n    operands: (\n        DatastoreQueryExpressionOperands\n        | None\n    ) = None\n) -&gt; None:\n    self.operator: (\n        str\n        | None\n    ) = operator\n    self.operands: (\n        DatastoreQueryExpressionOperands\n        | None\n    ) = operands\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryExpressionOperands","title":"DatastoreQueryExpressionOperands","text":"<pre><code>DatastoreQueryExpressionOperands(\n    items: (\n        typing.Iterable[\n            float\n            | int\n            | decimal.Decimal\n            | str\n            | cmsgov.provider_data.v1.model.DatastoreQueryResourceProperty\n            | cmsgov.provider_data.v1.model.DatastoreQueryExpressionOperandsItemAnyOf3\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Arithmetic operators will require two operands, aggregate operators should take only one. Do not combine arithmetic and aggregate operators in a single query.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            float\n            | int\n            | decimal.Decimal\n            | str\n            | DatastoreQueryResourceProperty\n            | DatastoreQueryExpressionOperandsItemAnyOf3\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryExpressionOperandsItemAnyOf3","title":"DatastoreQueryExpressionOperandsItemAnyOf3","text":"<pre><code>DatastoreQueryExpressionOperandsItemAnyOf3(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    expression: typing.Any | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>expression</code>               (<code>typing.Any | None</code>)           \u2013            <p>Arithmetic or aggregate expression performed on one or more properties.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    expression: (\n        typing.Any\n        | None\n    ) = None\n) -&gt; None:\n    self.expression: (\n        typing.Any\n        | None\n    ) = expression\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQueryResourceProperty","title":"DatastoreQueryResourceProperty","text":"<pre><code>DatastoreQueryResourceProperty(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: str | None = None,\n    property_: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Property name with optional collection/table alias.</p> <p>Attributes:</p> <ul> <li> <code>resource</code>               (<code>str | None</code>)           \u2013            <p>Alias to resource set in resources array. Not needed when only querying against one resource.</p> </li> <li> <code>property_</code>               (<code>str | None</code>)           \u2013            <p>The property/column or alias to filter by. Should not include collection/table alias.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: (\n        str\n        | None\n    ) = None,\n    property_: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.resource: (\n        str\n        | None\n    ) = resource\n    self.property_: (\n        str\n        | None\n    ) = property_\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreQuerySort","title":"DatastoreQuerySort","text":"<pre><code>DatastoreQuerySort(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: str | None = None,\n    property_: str | None = None,\n    order: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Properties to sort by in a particular order.</p> <p>Attributes:</p> <ul> <li> <code>resource</code>               (<code>str | None</code>)           \u2013            <p>Alias to resource set in resources array. Not needed when only querying against one resource.</p> </li> <li> <code>property_</code>               (<code>str | None</code>)           \u2013            <p>The property/column or alias to filter by. Should not include collection/table alias.</p> </li> <li> <code>order</code>               (<code>str | None</code>)           \u2013            <p>Order to sort in, lowercase.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: (\n        str\n        | None\n    ) = None,\n    property_: (\n        str\n        | None\n    ) = None,\n    order: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.resource: (\n        str\n        | None\n    ) = resource\n    self.property_: (\n        str\n        | None\n    ) = property_\n    self.order: (\n        str\n        | None\n    ) = order\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreResourceQuery","title":"DatastoreResourceQuery","text":"<pre><code>DatastoreResourceQuery(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    properties: (\n        cmsgov.provider_data.v1.model.DatastoreResourceQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        cmsgov.provider_data.v1.model.DatastoreResourceQueryConditions\n        | None\n    ) = None,\n    groupings: (\n        cmsgov.provider_data.v1.model.DatastoreResourceQueryGroupings\n        | None\n    ) = None,\n    limit: int | None = None,\n    offset: int | None = None,\n    sorts: (\n        cmsgov.provider_data.v1.model.DatastoreResourceQuerySorts\n        | None\n    ) = None,\n    count: bool | None = None,\n    results: bool | None = None,\n    schema: bool | None = None,\n    keys: bool | None = None,\n    format_: str | None = None,\n    row_ids: bool | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Schema for DKAN datastore queries. When querying against a specific resource, the \"resource\" property is always optional. If you want to set it explicitly, note that it will be aliased to simply \"t\".</p> <p>Attributes:</p> <ul> <li> <code>properties</code>               (<code>cmsgov.provider_data.v1.model.DatastoreResourceQueryProperties | None</code>)           \u2013            </li> <li> <code>conditions</code>               (<code>cmsgov.provider_data.v1.model.DatastoreResourceQueryConditions | None</code>)           \u2013            <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> </li> <li> <code>groupings</code>               (<code>cmsgov.provider_data.v1.model.DatastoreResourceQueryGroupings | None</code>)           \u2013            <p>Properties or aliases to group results by.</p> </li> <li> <code>limit</code>               (<code>int | None</code>)           \u2013            <p>Limit for maximum number of records returned. Pass zero for no limit (may be restricted by user permissions).</p> </li> <li> <code>offset</code>               (<code>int | None</code>)           \u2013            <p>Number of records to offset by or skip before returning first record.</p> </li> <li> <code>sorts</code>               (<code>cmsgov.provider_data.v1.model.DatastoreResourceQuerySorts | None</code>)           \u2013            <p>Result sorting directives.</p> </li> <li> <code>count</code>               (<code>bool | None</code>)           \u2013            <p>Return a count of the total rows returned by the query, ignoring the limit/offset.</p> </li> <li> <code>results</code>               (<code>bool | None</code>)           \u2013            <p>Return the result set. Set to false and set count to true to receive only a count of matches.</p> </li> <li> <code>schema</code>               (<code>bool | None</code>)           \u2013            <p>Return the schema for the datastore collection.</p> </li> <li> <code>keys</code>               (<code>bool | None</code>)           \u2013            <p>Return results as an array of keyed objects, with the column machine names as keys. If false, results will be an array of simple arrays of values.</p> </li> <li> <code>format_</code>               (<code>str | None</code>)           \u2013            <p>Format to return data in. Default is JSON, can be set to CSV.</p> </li> <li> <code>row_ids</code>               (<code>bool | None</code>)           \u2013            <p>Flag to include the result_number column in output. Default is FALSE</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    properties: (\n        DatastoreResourceQueryProperties\n        | None\n    ) = None,\n    conditions: (\n        DatastoreResourceQueryConditions\n        | None\n    ) = None,\n    groupings: (\n        DatastoreResourceQueryGroupings\n        | None\n    ) = None,\n    limit: (\n        int\n        | None\n    ) = None,\n    offset: (\n        int\n        | None\n    ) = None,\n    sorts: (\n        DatastoreResourceQuerySorts\n        | None\n    ) = None,\n    count: (\n        bool\n        | None\n    ) = None,\n    results: (\n        bool\n        | None\n    ) = None,\n    schema: (\n        bool\n        | None\n    ) = None,\n    keys: (\n        bool\n        | None\n    ) = None,\n    format_: (\n        str\n        | None\n    ) = None,\n    row_ids: (\n        bool\n        | None\n    ) = None\n) -&gt; None:\n    self.properties: (\n        DatastoreResourceQueryProperties\n        | None\n    ) = properties\n    self.conditions: (\n        DatastoreResourceQueryConditions\n        | None\n    ) = conditions\n    self.groupings: (\n        DatastoreResourceQueryGroupings\n        | None\n    ) = groupings\n    self.limit: (\n        int\n        | None\n    ) = limit\n    self.offset: (\n        int\n        | None\n    ) = offset\n    self.sorts: (\n        DatastoreResourceQuerySorts\n        | None\n    ) = sorts\n    self.count: (\n        bool\n        | None\n    ) = count\n    self.results: (\n        bool\n        | None\n    ) = results\n    self.schema: (\n        bool\n        | None\n    ) = schema\n    self.keys: (\n        bool\n        | None\n    ) = keys\n    self.format_: (\n        str\n        | None\n    ) = format_\n    self.row_ids: (\n        bool\n        | None\n    ) = row_ids\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreResourceQueryConditions","title":"DatastoreResourceQueryConditions","text":"<pre><code>DatastoreResourceQueryConditions(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.DatastoreQueryCondition\n            | cmsgov.provider_data.v1.model.DatastoreQueryConditionGroup\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Conditions or groups of conditions for the query, bound by 'and' operator.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            DatastoreQueryCondition\n            | DatastoreQueryConditionGroup\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreResourceQueryGroupings","title":"DatastoreResourceQueryGroupings","text":"<pre><code>DatastoreResourceQueryGroupings(\n    items: (\n        typing.Iterable[\n            str\n            | cmsgov.provider_data.v1.model.DatastoreQueryResourceProperty\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Properties or aliases to group results by.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n            | DatastoreQueryResourceProperty\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreResourceQueryPropertiesItemAnyOf1","title":"DatastoreResourceQueryPropertiesItemAnyOf1","text":"<pre><code>DatastoreResourceQueryPropertiesItemAnyOf1(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: str | None = None,\n    property_: str | None = None,\n    alias: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>resource</code>               (<code>str | None</code>)           \u2013            <p>Alias to resource set in resources array. Not needed when only querying against one resource.</p> </li> <li> <code>property_</code>               (<code>str | None</code>)           \u2013            <p>The property/column or alias to filter by. Should not include collection/table alias.</p> </li> <li> <code>alias</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    resource: (\n        str\n        | None\n    ) = None,\n    property_: (\n        str\n        | None\n    ) = None,\n    alias: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.resource: (\n        str\n        | None\n    ) = resource\n    self.property_: (\n        str\n        | None\n    ) = property_\n    self.alias: (\n        str\n        | None\n    ) = alias\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreResourceQueryPropertiesItemAnyOf2","title":"DatastoreResourceQueryPropertiesItemAnyOf2","text":"<pre><code>DatastoreResourceQueryPropertiesItemAnyOf2(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    expression: (\n        cmsgov.provider_data.v1.model.DatastoreQueryExpression\n        | None\n    ) = None,\n    alias: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>expression</code>               (<code>cmsgov.provider_data.v1.model.DatastoreQueryExpression | None</code>)           \u2013            <p>Arithmetic or aggregate expression performed on one or more properties.</p> </li> <li> <code>alias</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    expression: (\n        DatastoreQueryExpression\n        | None\n    ) = None,\n    alias: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.expression: (\n        DatastoreQueryExpression\n        | None\n    ) = expression\n    self.alias: (\n        str\n        | None\n    ) = alias\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreResourceQuerySorts","title":"DatastoreResourceQuerySorts","text":"<pre><code>DatastoreResourceQuerySorts(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.DatastoreQuerySort\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Result sorting directives.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            DatastoreQuerySort\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.ErrorResponse","title":"ErrorResponse","text":"<pre><code>ErrorResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: str | None = None,\n    status: int | None = None,\n    timestamp: datetime.datetime | None = None,\n    data: sob.Dictionary | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>message</code>               (<code>str | None</code>)           \u2013            <p>Error message.</p> </li> <li> <code>status</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>timestamp</code>               (<code>datetime.datetime | None</code>)           \u2013            </li> <li> <code>data</code>               (<code>sob.Dictionary | None</code>)           \u2013            <p>Arbitrary object storing more detailed data on the error message.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: (\n        str\n        | None\n    ) = None,\n    status: (\n        int\n        | None\n    ) = None,\n    timestamp: (\n        datetime.datetime\n        | None\n    ) = None,\n    data: (\n        sob.Dictionary\n        | None\n    ) = None\n) -&gt; None:\n    self.message: (\n        str\n        | None\n    ) = message\n    self.status: (\n        int\n        | None\n    ) = status\n    self.timestamp: (\n        datetime.datetime\n        | None\n    ) = timestamp\n    self.data: (\n        sob.Dictionary\n        | None\n    ) = data\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.Facets","title":"Facets","text":"<pre><code>Facets(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.FacetsItem\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Array of facet values.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            FacetsItem\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.FacetsItem","title":"FacetsItem","text":"<pre><code>FacetsItem(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    name: str | None = None,\n    total: str | int | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>Machine name for the metastore property to filter on.</p> </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            <p>The facet filter value, for instance, the tet of a keyword to filter by</p> </li> <li> <code>total</code>               (<code>str | int | None</code>)           \u2013            <p>Number of results in the current result set that match this filter.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    name: (\n        str\n        | None\n    ) = None,\n    total: (\n        str\n        | int\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.name: (\n        str\n        | None\n    ) = name\n    self.total: (\n        str\n        | int\n        | None\n    ) = total\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.HarvestPlan","title":"HarvestPlan","text":"<pre><code>HarvestPlan(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    identifier: str | None = None,\n    extract: (\n        cmsgov.provider_data.v1.model.HarvestPlanExtract\n        | None\n    ) = None,\n    load: (\n        cmsgov.provider_data.v1.model.HarvestPlanLoad | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>extract</code>               (<code>cmsgov.provider_data.v1.model.HarvestPlanExtract | None</code>)           \u2013            </li> <li> <code>load</code>               (<code>cmsgov.provider_data.v1.model.HarvestPlanLoad | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None,\n    extract: (\n        HarvestPlanExtract\n        | None\n    ) = None,\n    load: (\n        HarvestPlanLoad\n        | None\n    ) = None\n) -&gt; None:\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    self.extract: (\n        HarvestPlanExtract\n        | None\n    ) = extract\n    self.load: (\n        HarvestPlanLoad\n        | None\n    ) = load\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.HarvestPlanExtract","title":"HarvestPlanExtract","text":"<pre><code>HarvestPlanExtract(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    uri: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>uri</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    uri: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.uri: (\n        str\n        | None\n    ) = uri\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.HarvestPlanLoad","title":"HarvestPlanLoad","text":"<pre><code>HarvestPlanLoad(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreNewRevision","title":"MetastoreNewRevision","text":"<pre><code>MetastoreNewRevision(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: str | None = None,\n    state: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>When creating a new revision, you may only submit a message and state.</p> <p>Attributes:</p> <ul> <li> <code>message</code>               (<code>str | None</code>)           \u2013            <p>Revision log message.</p> </li> <li> <code>state</code>               (<code>str | None</code>)           \u2013            <p>The workflow state of this revision. Currently five states are supported in DKAN.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: (\n        str\n        | None\n    ) = None,\n    state: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.message: (\n        str\n        | None\n    ) = message\n    self.state: (\n        str\n        | None\n    ) = state\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreRevision","title":"MetastoreRevision","text":"<pre><code>MetastoreRevision(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    identifier: str | None = None,\n    published: bool | None = None,\n    message: str | None = None,\n    modified: datetime.datetime | None = None,\n    state: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            <p>Revision identifier.</p> </li> <li> <code>published</code>               (<code>bool | None</code>)           \u2013            <p>Is this the currently published revision?.</p> </li> <li> <code>message</code>               (<code>str | None</code>)           \u2013            <p>Revision log message.</p> </li> <li> <code>modified</code>               (<code>datetime.datetime | None</code>)           \u2013            <p>Timestamp of this revision/modification.</p> </li> <li> <code>state</code>               (<code>str | None</code>)           \u2013            <p>The workflow state of this revision. Currently five states are supported in DKAN.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None,\n    published: (\n        bool\n        | None\n    ) = None,\n    message: (\n        str\n        | None\n    ) = None,\n    modified: (\n        datetime.datetime\n        | None\n    ) = None,\n    state: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    self.published: (\n        bool\n        | None\n    ) = published\n    self.message: (\n        str\n        | None\n    ) = message\n    self.modified: (\n        datetime.datetime\n        | None\n    ) = modified\n    self.state: (\n        str\n        | None\n    ) = state\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreWriteResponse","title":"MetastoreWriteResponse","text":"<pre><code>MetastoreWriteResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    endpoint: str | None = None,\n    identifier: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>endpoint</code>               (<code>str | None</code>)           \u2013            <p>Path to the metadata from the API.</p> </li> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            <p>Identifier for metadata just created or modified.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    endpoint: (\n        str\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.endpoint: (\n        str\n        | None\n    ) = endpoint\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreImportsPostRequest","title":"DatastoreImportsPostRequest","text":"<pre><code>DatastoreImportsPostRequest(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    plan_id: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>plan_id</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    plan_id: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.plan_id: (\n        str\n        | None\n    ) = plan_id\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreImportDeleteResponse","title":"DatastoreImportDeleteResponse","text":"<pre><code>DatastoreImportDeleteResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>message</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.message: (\n        str\n        | None\n    ) = message\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.DatastoreImportGetResponse","title":"DatastoreImportGetResponse","text":"<pre><code>DatastoreImportGetResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    num_of_rows: int | None = None,\n    num_of_columns: int | None = None,\n    columns: sob.Dictionary | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>num_of_rows</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>num_of_columns</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>columns</code>               (<code>sob.Dictionary | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    num_of_rows: (\n        int\n        | None\n    ) = None,\n    num_of_columns: (\n        int\n        | None\n    ) = None,\n    columns: (\n        sob.Dictionary\n        | None\n    ) = None\n) -&gt; None:\n    self.num_of_rows: (\n        int\n        | None\n    ) = num_of_rows\n    self.num_of_columns: (\n        int\n        | None\n    ) = num_of_columns\n    self.columns: (\n        sob.Dictionary\n        | None\n    ) = columns\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.HarvestPlansPostResponse","title":"HarvestPlansPostResponse","text":"<pre><code>HarvestPlansPostResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    endpoint: str | None = None,\n    identifier: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>endpoint</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    endpoint: (\n        str\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.endpoint: (\n        str\n        | None\n    ) = endpoint\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.HarvestRunsPostRequest","title":"HarvestRunsPostRequest","text":"<pre><code>HarvestRunsPostRequest(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    plan_id: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>plan_id</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    plan_id: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.plan_id: (\n        str\n        | None\n    ) = plan_id\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.HarvestRunsPostResponse","title":"HarvestRunsPostResponse","text":"<pre><code>HarvestRunsPostResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    identifier: str | None = None,\n    result: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>result</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None,\n    result: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    self.result: (\n        str\n        | None\n    ) = result\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequest","title":"MetastoreSchemasDatasetItemsPatchRequest","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequest(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    title: str | None = None,\n    identifier: str | None = None,\n    description: str | None = None,\n    access_level: str | None = None,\n    rights: str | sob.Null | None = None,\n    accrual_periodicity: str | None = None,\n    described_by: str | None = None,\n    described_by_type: str | None = None,\n    issued: str | None = None,\n    modified: str | None = None,\n    released: str | None = None,\n    next_update_date: str | None = None,\n    license_: str | None = None,\n    spatial: str | None = None,\n    temporal: str | None = None,\n    is_part_of: str | None = None,\n    publisher: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaPublisher\n        | None\n    ) = None,\n    bureau_code: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaBureauCode\n        | None\n    ) = None,\n    program_code: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaProgramCode\n        | None\n    ) = None,\n    contact_point: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaContactPoint\n        | sob.Dictionary\n        | None\n    ) = None,\n    theme: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaTheme\n        | None\n    ) = None,\n    keyword: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaKeyword\n        | None\n    ) = None,\n    distribution: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistribution\n        | None\n    ) = None,\n    references: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaReferences\n        | None\n    ) = None,\n    archive_exclude: bool | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be dcat:Dataset for each Dataset.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>Human-readable name of the asset. Should be in plain English and include sufficient detail to facilitate search and discovery.</p> </li> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            <p>A unique identifier for the dataset or API as maintained within an Agency catalog or database.</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>Human-readable description (e.g., an abstract) with sufficient detail to enable a user to quickly understand whether the asset is of interest.</p> </li> <li> <code>access_level</code>               (<code>str | None</code>)           \u2013            <p>The degree to which this dataset could be made publicly-available, regardless of whether it has been made available. Choices: public (Data asset is or could be made publicly available to all without restrictions), restricted public (Data asset is available under certain use restrictions), or non-public ( Data asset is not available to members of the public).</p> </li> <li> <code>rights</code>               (<code>str | sob.Null | None</code>)           \u2013            <p>This may include information regarding access or restrictions based on privacy, security, or other policies. This should also provide an explanation for the selected \"accessLevel\" including instructions for how to access a restricted file, if applicable, or explanation for why a \"non-public\" or \"restricted public\" data assetis not \"public,\" if applicable. Text, 255 characters.</p> </li> <li> <code>accrual_periodicity</code>               (<code>str | None</code>)           \u2013            <p>Frequency with which dataset is published.</p> </li> <li> <code>described_by</code>               (<code>str | None</code>)           \u2013            <p>URL to the data dictionary for the dataset or API. Note that documentation other than a data dictionary can be referenced using Related Documents as shown in the expanded fields.</p> </li> <li> <code>described_by_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.</p> </li> <li> <code>issued</code>               (<code>str | None</code>)           \u2013            <p>Date of formal issuance.</p> </li> <li> <code>modified</code>               (<code>str | None</code>)           \u2013            <p>Most recent date on which the dataset was changed, updated or modified.</p> </li> <li> <code>released</code>               (<code>str | None</code>)           \u2013            <p>Date on which the dataset is scheduled to be published.</p> </li> <li> <code>next_update_date</code>               (<code>str | None</code>)           \u2013            <p>The date on which the dataset is expected to be updated next.</p> </li> <li> <code>license_</code>               (<code>str | None</code>)           \u2013            <p>The license dataset or API is published with. See Open Licenses&lt;/ a&gt; for more information. <li> <code>spatial</code>               (<code>str | None</code>)           \u2013            <p>The spatial coverage of the dataset. Could include a spatial region like a bounding box or a named place.</p> </li> <li> <code>temporal</code>               (<code>str | None</code>)           \u2013            <p>The start and end dates for which the dataset is applicable, separated by a \"/\" (i.e., 2000-01-15T00:45:00Z/2010-01- 15T00:06:00Z).</p> </li> <li> <code>is_part_of</code>               (<code>str | None</code>)           \u2013            <p>The collection of which the dataset is a subset.</p> </li> <li> <code>publisher</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaPublisher | None</code>)           \u2013            <p>A Dataset Publisher Organization.</p> </li> <li> <code>bureau_code</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaBureauCode | None</code>)           \u2013            <p>Federal agencies, combined agency and bureau code from  OMB Circular A-11, Appendix C in the format of <code>015:010</code>.</p> </li> <li> <code>program_code</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaProgramCode | None</code>)           \u2013            <p>Federal agencies, list the primary program related to this data asset, from the Federal Program Inventory. Use the format of <code>015:001</code></p> </li> <li> <code>contact_point</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaContactPoint | sob.Dictionary | None</code>)           \u2013            <p>A Dataset ContactPoint as a vCard object.</p> </li> <li> <code>theme</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaTheme | None</code>)           \u2013            <p>Main thematic category of the dataset.</p> </li> <li> <code>keyword</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaKeyword | None</code>)           \u2013            <p>Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non- technical users.</p> </li> <li> <code>distribution</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistribution | None</code>)           \u2013            <p>A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.</p> </li> <li> <code>references</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaReferences | None</code>)           \u2013            <p>Related documents such as technical information about a dataset, developer documentation, etc.</p> </li> <li> <code>archive_exclude</code>               (<code>bool | None</code>)           \u2013            <p>For excluding this dataset from its provider's ' download all datasets'.</p> </li> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    title: (\n        str\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None,\n    description: (\n        str\n        | None\n    ) = None,\n    access_level: (\n        str\n        | None\n    ) = None,\n    rights: (\n        str\n        | sob.Null\n        | None\n    ) = None,\n    accrual_periodicity: (\n        str\n        | None\n    ) = None,\n    described_by: (\n        str\n        | None\n    ) = None,\n    described_by_type: (\n        str\n        | None\n    ) = None,\n    issued: (\n        str\n        | None\n    ) = None,\n    modified: (\n        str\n        | None\n    ) = None,\n    released: (\n        str\n        | None\n    ) = None,\n    next_update_date: (\n        str\n        | None\n    ) = None,\n    license_: (\n        str\n        | None\n    ) = None,\n    spatial: (\n        str\n        | None\n    ) = None,\n    temporal: (\n        str\n        | None\n    ) = None,\n    is_part_of: (\n        str\n        | None\n    ) = None,\n    publisher: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaPublisher  # noqa: E501\n        | None\n    ) = None,\n    bureau_code: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaBureauCode  # noqa: E501\n        | None\n    ) = None,\n    program_code: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaProgramCode  # noqa: E501\n        | None\n    ) = None,\n    contact_point: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaContactPoint  # noqa: E501\n        | sob.Dictionary\n        | None\n    ) = None,\n    theme: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaTheme  # noqa: E501\n        | None\n    ) = None,\n    keyword: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaKeyword  # noqa: E501\n        | None\n    ) = None,\n    distribution: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistribution  # noqa: E501\n        | None\n    ) = None,\n    references: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaReferences  # noqa: E501\n        | None\n    ) = None,\n    archive_exclude: (\n        bool\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.title: (\n        str\n        | None\n    ) = title\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    self.description: (\n        str\n        | None\n    ) = description\n    self.access_level: (\n        str\n        | None\n    ) = access_level\n    self.rights: (\n        str\n        | sob.Null\n        | None\n    ) = rights\n    self.accrual_periodicity: (\n        str\n        | None\n    ) = accrual_periodicity\n    self.described_by: (\n        str\n        | None\n    ) = described_by\n    self.described_by_type: (\n        str\n        | None\n    ) = described_by_type\n    self.issued: (\n        str\n        | None\n    ) = issued\n    self.modified: (\n        str\n        | None\n    ) = modified\n    self.released: (\n        str\n        | None\n    ) = released\n    self.next_update_date: (\n        str\n        | None\n    ) = next_update_date\n    self.license_: (\n        str\n        | None\n    ) = license_\n    self.spatial: (\n        str\n        | None\n    ) = spatial\n    self.temporal: (\n        str\n        | None\n    ) = temporal\n    self.is_part_of: (\n        str\n        | None\n    ) = is_part_of\n    self.publisher: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaPublisher  # noqa: E501\n        | None\n    ) = publisher\n    self.bureau_code: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaBureauCode  # noqa: E501\n        | None\n    ) = bureau_code\n    self.program_code: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaProgramCode  # noqa: E501\n        | None\n    ) = program_code\n    self.contact_point: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaContactPoint  # noqa: E501\n        | sob.Dictionary\n        | None\n    ) = contact_point\n    self.theme: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaTheme  # noqa: E501\n        | None\n    ) = theme\n    self.keyword: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaKeyword  # noqa: E501\n        | None\n    ) = keyword\n    self.distribution: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistribution  # noqa: E501\n        | None\n    ) = distribution\n    self.references: (\n        MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaReferences  # noqa: E501\n        | None\n    ) = references\n    self.archive_exclude: (\n        bool\n        | None\n    ) = archive_exclude\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaBureauCode","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaBureauCode","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaBureauCode(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Federal agencies, combined agency and bureau code from  OMB Circular A-11, Appendix C in the format of <code>015:010</code>.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaContactPoint","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaContactPoint","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaContactPoint(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    fn: str | None = None,\n    has_email: str | None = None,\n    has_url: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>A Dataset ContactPoint as a vCard object.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be vcard:Contact for contactPoint.</p> </li> <li> <code>fn</code>               (<code>str | None</code>)           \u2013            <p>A full formatted name, e.g. Firstname Lastname.</p> </li> <li> <code>has_email</code>               (<code>str | None</code>)           \u2013            <p>Email address for the contact name.</p> </li> <li> <code>has_url</code>               (<code>str | None</code>)           \u2013            <p>URL for the contact</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    fn: (\n        str\n        | None\n    ) = None,\n    has_email: (\n        str\n        | None\n    ) = None,\n    has_url: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.fn: (\n        str\n        | None\n    ) = fn\n    self.has_email: (\n        str\n        | None\n    ) = has_email\n    self.has_url: (\n        str\n        | None\n    ) = has_url\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistribution","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistribution","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistribution(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistributionItem\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistributionItem  # noqa: E501\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistributionItem","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistributionItem","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaDistributionItem(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    title: str | None = None,\n    description: str | None = None,\n    format_: str | None = None,\n    media_type: str | None = None,\n    download_url: str | None = None,\n    access_url: str | None = None,\n    conforms_to: str | None = None,\n    described_by: str | None = None,\n    described_by_type: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be dcat: Distribution for each Distribution.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>Human-readable name of the file.</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>Human-readable description of the file.</p> </li> <li> <code>format_</code>               (<code>str | None</code>)           \u2013            <p>A human-readable description of the file format of a distribution (i.e. csv, pdf, kml, etc.).</p> </li> <li> <code>media_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s downloadURL.</p> </li> <li> <code>download_url</code>               (<code>str | None</code>)           \u2013            <p>URL providing direct access to a downloadable file of a dataset.</p> </li> <li> <code>access_url</code>               (<code>str | None</code>)           \u2013            <p>URL providing indirect access to a dataset.</p> </li> <li> <code>conforms_to</code>               (<code>str | None</code>)           \u2013            <p>URI used to identify a standardized specification the distribution conforms to.</p> </li> <li> <code>described_by</code>               (<code>str | None</code>)           \u2013            <p>URL to the data dictionary for the distribution found at the downloadURL.</p> </li> <li> <code>described_by_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    title: (\n        str\n        | None\n    ) = None,\n    description: (\n        str\n        | None\n    ) = None,\n    format_: (\n        str\n        | None\n    ) = None,\n    media_type: (\n        str\n        | None\n    ) = None,\n    download_url: (\n        str\n        | None\n    ) = None,\n    access_url: (\n        str\n        | None\n    ) = None,\n    conforms_to: (\n        str\n        | None\n    ) = None,\n    described_by: (\n        str\n        | None\n    ) = None,\n    described_by_type: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.title: (\n        str\n        | None\n    ) = title\n    self.description: (\n        str\n        | None\n    ) = description\n    self.format_: (\n        str\n        | None\n    ) = format_\n    self.media_type: (\n        str\n        | None\n    ) = media_type\n    self.download_url: (\n        str\n        | None\n    ) = download_url\n    self.access_url: (\n        str\n        | None\n    ) = access_url\n    self.conforms_to: (\n        str\n        | None\n    ) = conforms_to\n    self.described_by: (\n        str\n        | None\n    ) = described_by\n    self.described_by_type: (\n        str\n        | None\n    ) = described_by_type\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaKeyword","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaKeyword","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaKeyword(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non-technical users.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaProgramCode","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaProgramCode","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaProgramCode(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Federal agencies, list the primary program related to this data asset, from the Federal Program Inventory. Use the format of <code>015:001</code></p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaPublisher","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaPublisher","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaPublisher(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    name: str | None = None,\n    sub_organization_of: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>A Dataset Publisher Organization.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be org: Organization for each publisher</p> </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>sub_organization_of</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    name: (\n        str\n        | None\n    ) = None,\n    sub_organization_of: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.name: (\n        str\n        | None\n    ) = name\n    self.sub_organization_of: (\n        str\n        | None\n    ) = sub_organization_of\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaReferences","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaReferences","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaReferences(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Related documents such as technical information about a dataset, developer documentation, etc.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaTheme","title":"MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaTheme","text":"<pre><code>MetastoreSchemasDatasetItemsPatchRequestBodyContentApplicationJsonSchemaTheme(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Main thematic category of the dataset.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequest","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequest","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequest(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    title: str | None = None,\n    identifier: str | None = None,\n    description: str | None = None,\n    access_level: str | None = None,\n    rights: str | sob.Null | None = None,\n    accrual_periodicity: str | None = None,\n    described_by: str | None = None,\n    described_by_type: str | None = None,\n    issued: str | None = None,\n    modified: str | None = None,\n    released: str | None = None,\n    next_update_date: str | None = None,\n    license_: str | None = None,\n    spatial: str | None = None,\n    temporal: str | None = None,\n    is_part_of: str | None = None,\n    publisher: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaPublisher\n        | None\n    ) = None,\n    bureau_code: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaBureauCode\n        | None\n    ) = None,\n    program_code: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaProgramCode\n        | None\n    ) = None,\n    contact_point: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaContactPoint\n        | sob.Dictionary\n        | None\n    ) = None,\n    theme: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaTheme\n        | None\n    ) = None,\n    keyword: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaKeyword\n        | None\n    ) = None,\n    distribution: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistribution\n        | None\n    ) = None,\n    references: (\n        cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaReferences\n        | None\n    ) = None,\n    archive_exclude: bool | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be dcat:Dataset for each Dataset.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>Human-readable name of the asset. Should be in plain English and include sufficient detail to facilitate search and discovery.</p> </li> <li> <code>identifier</code>               (<code>str | None</code>)           \u2013            <p>A unique identifier for the dataset or API as maintained within an Agency catalog or database.</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>Human-readable description (e.g., an abstract) with sufficient detail to enable a user to quickly understand whether the asset is of interest.</p> </li> <li> <code>access_level</code>               (<code>str | None</code>)           \u2013            <p>The degree to which this dataset could be made publicly-available, regardless of whether it has been made available. Choices: public (Data asset is or could be made publicly available to all without restrictions), restricted public (Data asset is available under certain use restrictions), or non-public ( Data asset is not available to members of the public).</p> </li> <li> <code>rights</code>               (<code>str | sob.Null | None</code>)           \u2013            <p>This may include information regarding access or restrictions based on privacy, security, or other policies. This should also provide an explanation for the selected \"accessLevel\" including instructions for how to access a restricted file, if applicable, or explanation for why a \"non-public\" or \"restricted public\" data assetis not \"public,\" if applicable. Text, 255 characters.</p> </li> <li> <code>accrual_periodicity</code>               (<code>str | None</code>)           \u2013            <p>Frequency with which dataset is published.</p> </li> <li> <code>described_by</code>               (<code>str | None</code>)           \u2013            <p>URL to the data dictionary for the dataset or API. Note that documentation other than a data dictionary can be referenced using Related Documents as shown in the expanded fields.</p> </li> <li> <code>described_by_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.</p> </li> <li> <code>issued</code>               (<code>str | None</code>)           \u2013            <p>Date of formal issuance.</p> </li> <li> <code>modified</code>               (<code>str | None</code>)           \u2013            <p>Most recent date on which the dataset was changed, updated or modified.</p> </li> <li> <code>released</code>               (<code>str | None</code>)           \u2013            <p>Date on which the dataset is scheduled to be published.</p> </li> <li> <code>next_update_date</code>               (<code>str | None</code>)           \u2013            <p>The date on which the dataset is expected to be updated next.</p> </li> <li> <code>license_</code>               (<code>str | None</code>)           \u2013            <p>The license dataset or API is published with. See Open Licenses&lt;/ a&gt; for more information. <li> <code>spatial</code>               (<code>str | None</code>)           \u2013            <p>The spatial coverage of the dataset. Could include a spatial region like a bounding box or a named place.</p> </li> <li> <code>temporal</code>               (<code>str | None</code>)           \u2013            <p>The start and end dates for which the dataset is applicable, separated by a \"/\" (i.e., 2000-01-15T00:45:00Z/2010-01- 15T00:06:00Z).</p> </li> <li> <code>is_part_of</code>               (<code>str | None</code>)           \u2013            <p>The collection of which the dataset is a subset.</p> </li> <li> <code>publisher</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaPublisher | None</code>)           \u2013            <p>A Dataset Publisher Organization.</p> </li> <li> <code>bureau_code</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaBureauCode | None</code>)           \u2013            <p>Federal agencies, combined agency and bureau code from  OMB Circular A-11, Appendix C in the format of <code>015:010</code>.</p> </li> <li> <code>program_code</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaProgramCode | None</code>)           \u2013            <p>Federal agencies, list the primary program related to this data asset, from the Federal Program Inventory. Use the format of <code>015:001</code></p> </li> <li> <code>contact_point</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaContactPoint | sob.Dictionary | None</code>)           \u2013            <p>A Dataset ContactPoint as a vCard object.</p> </li> <li> <code>theme</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaTheme | None</code>)           \u2013            <p>Main thematic category of the dataset.</p> </li> <li> <code>keyword</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaKeyword | None</code>)           \u2013            <p>Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non- technical users.</p> </li> <li> <code>distribution</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistribution | None</code>)           \u2013            <p>A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.</p> </li> <li> <code>references</code>               (<code>cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaReferences | None</code>)           \u2013            <p>Related documents such as technical information about a dataset, developer documentation, etc.</p> </li> <li> <code>archive_exclude</code>               (<code>bool | None</code>)           \u2013            <p>For excluding this dataset from its provider's ' download all datasets'.</p> </li> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    title: (\n        str\n        | None\n    ) = None,\n    identifier: (\n        str\n        | None\n    ) = None,\n    description: (\n        str\n        | None\n    ) = None,\n    access_level: (\n        str\n        | None\n    ) = None,\n    rights: (\n        str\n        | sob.Null\n        | None\n    ) = None,\n    accrual_periodicity: (\n        str\n        | None\n    ) = None,\n    described_by: (\n        str\n        | None\n    ) = None,\n    described_by_type: (\n        str\n        | None\n    ) = None,\n    issued: (\n        str\n        | None\n    ) = None,\n    modified: (\n        str\n        | None\n    ) = None,\n    released: (\n        str\n        | None\n    ) = None,\n    next_update_date: (\n        str\n        | None\n    ) = None,\n    license_: (\n        str\n        | None\n    ) = None,\n    spatial: (\n        str\n        | None\n    ) = None,\n    temporal: (\n        str\n        | None\n    ) = None,\n    is_part_of: (\n        str\n        | None\n    ) = None,\n    publisher: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaPublisher  # noqa: E501\n        | None\n    ) = None,\n    bureau_code: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaBureauCode  # noqa: E501\n        | None\n    ) = None,\n    program_code: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaProgramCode  # noqa: E501\n        | None\n    ) = None,\n    contact_point: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaContactPoint  # noqa: E501\n        | sob.Dictionary\n        | None\n    ) = None,\n    theme: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaTheme  # noqa: E501\n        | None\n    ) = None,\n    keyword: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaKeyword  # noqa: E501\n        | None\n    ) = None,\n    distribution: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistribution  # noqa: E501\n        | None\n    ) = None,\n    references: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaReferences  # noqa: E501\n        | None\n    ) = None,\n    archive_exclude: (\n        bool\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.title: (\n        str\n        | None\n    ) = title\n    self.identifier: (\n        str\n        | None\n    ) = identifier\n    self.description: (\n        str\n        | None\n    ) = description\n    self.access_level: (\n        str\n        | None\n    ) = access_level\n    self.rights: (\n        str\n        | sob.Null\n        | None\n    ) = rights\n    self.accrual_periodicity: (\n        str\n        | None\n    ) = accrual_periodicity\n    self.described_by: (\n        str\n        | None\n    ) = described_by\n    self.described_by_type: (\n        str\n        | None\n    ) = described_by_type\n    self.issued: (\n        str\n        | None\n    ) = issued\n    self.modified: (\n        str\n        | None\n    ) = modified\n    self.released: (\n        str\n        | None\n    ) = released\n    self.next_update_date: (\n        str\n        | None\n    ) = next_update_date\n    self.license_: (\n        str\n        | None\n    ) = license_\n    self.spatial: (\n        str\n        | None\n    ) = spatial\n    self.temporal: (\n        str\n        | None\n    ) = temporal\n    self.is_part_of: (\n        str\n        | None\n    ) = is_part_of\n    self.publisher: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaPublisher  # noqa: E501\n        | None\n    ) = publisher\n    self.bureau_code: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaBureauCode  # noqa: E501\n        | None\n    ) = bureau_code\n    self.program_code: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaProgramCode  # noqa: E501\n        | None\n    ) = program_code\n    self.contact_point: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaContactPoint  # noqa: E501\n        | sob.Dictionary\n        | None\n    ) = contact_point\n    self.theme: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaTheme  # noqa: E501\n        | None\n    ) = theme\n    self.keyword: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaKeyword  # noqa: E501\n        | None\n    ) = keyword\n    self.distribution: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistribution  # noqa: E501\n        | None\n    ) = distribution\n    self.references: (\n        MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaReferences  # noqa: E501\n        | None\n    ) = references\n    self.archive_exclude: (\n        bool\n        | None\n    ) = archive_exclude\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaBureauCode","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaBureauCode","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaBureauCode(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Federal agencies, combined agency and bureau code from  OMB Circular A-11, Appendix C in the format of <code>015:010</code>.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaContactPoint","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaContactPoint","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaContactPoint(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    fn: str | None = None,\n    has_email: str | None = None,\n    has_url: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>A Dataset ContactPoint as a vCard object.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be vcard:Contact for contactPoint.</p> </li> <li> <code>fn</code>               (<code>str | None</code>)           \u2013            <p>A full formatted name, e.g. Firstname Lastname.</p> </li> <li> <code>has_email</code>               (<code>str | None</code>)           \u2013            <p>Email address for the contact name.</p> </li> <li> <code>has_url</code>               (<code>str | None</code>)           \u2013            <p>URL for the contact</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    fn: (\n        str\n        | None\n    ) = None,\n    has_email: (\n        str\n        | None\n    ) = None,\n    has_url: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.fn: (\n        str\n        | None\n    ) = fn\n    self.has_email: (\n        str\n        | None\n    ) = has_email\n    self.has_url: (\n        str\n        | None\n    ) = has_url\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistribution","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistribution","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistribution(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistributionItem\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistributionItem  # noqa: E501\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistributionItem","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistributionItem","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaDistributionItem(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    title: str | None = None,\n    description: str | None = None,\n    format_: str | None = None,\n    media_type: str | None = None,\n    download_url: str | None = None,\n    access_url: str | None = None,\n    conforms_to: str | None = None,\n    described_by: str | None = None,\n    described_by_type: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be dcat: Distribution for each Distribution.</p> </li> <li> <code>title</code>               (<code>str | None</code>)           \u2013            <p>Human-readable name of the file.</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>Human-readable description of the file.</p> </li> <li> <code>format_</code>               (<code>str | None</code>)           \u2013            <p>A human-readable description of the file format of a distribution (i.e. csv, pdf, kml, etc.).</p> </li> <li> <code>media_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s downloadURL.</p> </li> <li> <code>download_url</code>               (<code>str | None</code>)           \u2013            <p>URL providing direct access to a downloadable file of a dataset.</p> </li> <li> <code>access_url</code>               (<code>str | None</code>)           \u2013            <p>URL providing indirect access to a dataset.</p> </li> <li> <code>conforms_to</code>               (<code>str | None</code>)           \u2013            <p>URI used to identify a standardized specification the distribution conforms to.</p> </li> <li> <code>described_by</code>               (<code>str | None</code>)           \u2013            <p>URL to the data dictionary for the distribution found at the downloadURL.</p> </li> <li> <code>described_by_type</code>               (<code>str | None</code>)           \u2013            <p>The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    title: (\n        str\n        | None\n    ) = None,\n    description: (\n        str\n        | None\n    ) = None,\n    format_: (\n        str\n        | None\n    ) = None,\n    media_type: (\n        str\n        | None\n    ) = None,\n    download_url: (\n        str\n        | None\n    ) = None,\n    access_url: (\n        str\n        | None\n    ) = None,\n    conforms_to: (\n        str\n        | None\n    ) = None,\n    described_by: (\n        str\n        | None\n    ) = None,\n    described_by_type: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.title: (\n        str\n        | None\n    ) = title\n    self.description: (\n        str\n        | None\n    ) = description\n    self.format_: (\n        str\n        | None\n    ) = format_\n    self.media_type: (\n        str\n        | None\n    ) = media_type\n    self.download_url: (\n        str\n        | None\n    ) = download_url\n    self.access_url: (\n        str\n        | None\n    ) = access_url\n    self.conforms_to: (\n        str\n        | None\n    ) = conforms_to\n    self.described_by: (\n        str\n        | None\n    ) = described_by\n    self.described_by_type: (\n        str\n        | None\n    ) = described_by_type\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaKeyword","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaKeyword","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaKeyword(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non-technical users.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaProgramCode","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaProgramCode","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaProgramCode(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Federal agencies, list the primary program related to this data asset, from the Federal Program Inventory. Use the format of <code>015:001</code></p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaPublisher","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaPublisher","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaPublisher(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: str | None = None,\n    name: str | None = None,\n    sub_organization_of: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>A Dataset Publisher Organization.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str | None</code>)           \u2013            <p>IRI for the JSON-LD data type. This should be org: Organization for each publisher</p> </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>sub_organization_of</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    type_: (\n        str\n        | None\n    ) = None,\n    name: (\n        str\n        | None\n    ) = None,\n    sub_organization_of: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.type_: (\n        str\n        | None\n    ) = type_\n    self.name: (\n        str\n        | None\n    ) = name\n    self.sub_organization_of: (\n        str\n        | None\n    ) = sub_organization_of\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaReferences","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaReferences","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaReferences(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Related documents such as technical information about a dataset, developer documentation, etc.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaTheme","title":"MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaTheme","text":"<pre><code>MetastoreSchemasDatasetItemsIdentifierPatchRequestBodyContentApplicationJsonSchemaTheme(\n    items: (\n        typing.Iterable[str]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Main thematic category of the dataset.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            str\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasSchemaIdItemsGetResponse","title":"MetastoreSchemasSchemaIdItemsGetResponse","text":"<pre><code>MetastoreSchemasSchemaIdItemsGetResponse(\n    items: (\n        typing.Iterable[sob.Dictionary]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Array of metastore items matching the chosen schema.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            sob.Dictionary\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemasSchemaIdItemsIdentifierRevisionsGetResponse","title":"MetastoreSchemasSchemaIdItemsIdentifierRevisionsGetResponse","text":"<pre><code>MetastoreSchemasSchemaIdItemsIdentifierRevisionsGetResponse(\n    items: (\n        typing.Iterable[\n            cmsgov.provider_data.v1.model.MetastoreRevision\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Array</code></p> <p>Array of revision objects.</p> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    items: (\n        typing.Iterable[\n            MetastoreRevision\n        ]\n        | sob.abc.Readable\n        | str\n        | bytes\n        | None\n    ) = None\n) -&gt; None:\n    super().__init__(items)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.MetastoreSchemaRevisionPostRequest","title":"MetastoreSchemaRevisionPostRequest","text":"<pre><code>MetastoreSchemaRevisionPostRequest(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: str | None = None,\n    state: str | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>message</code>               (<code>str | None</code>)           \u2013            <p>Revision log message.</p> </li> <li> <code>state</code>               (<code>str | None</code>)           \u2013            <p>The workflow state of this revision. Currently five states are supported in DKAN.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    message: (\n        str\n        | None\n    ) = None,\n    state: (\n        str\n        | None\n    ) = None\n) -&gt; None:\n    self.message: (\n        str\n        | None\n    ) = message\n    self.state: (\n        str\n        | None\n    ) = state\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.SearchGetResponse","title":"SearchGetResponse","text":"<pre><code>SearchGetResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    total: str | int | None = None,\n    results: sob.Array | sob.Dictionary | None = None,\n    facets: (\n        cmsgov.provider_data.v1.model.Facets | None\n    ) = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>total</code>               (<code>str | int | None</code>)           \u2013            <p>Total search results for query.</p> </li> <li> <code>results</code>               (<code>sob.Array | sob.Dictionary | None</code>)           \u2013            <p>An object with keys following the format \"dkan_dataset/[ uuid]\", containing full dataset objects from the DKAN metastore.</p> </li> <li> <code>facets</code>               (<code>cmsgov.provider_data.v1.model.Facets | None</code>)           \u2013            <p>Array of facet values.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    total: (\n        str\n        | int\n        | None\n    ) = None,\n    results: (\n        sob.Array\n        | sob.Dictionary\n        | None\n    ) = None,\n    facets: (\n        Facets\n        | None\n    ) = None\n) -&gt; None:\n    self.total: (\n        str\n        | int\n        | None\n    ) = total\n    self.results: (\n        sob.Array\n        | sob.Dictionary\n        | None\n    ) = results\n    self.facets: (\n        Facets\n        | None\n    ) = facets\n    super().__init__(_data)\n</code></pre>"},{"location":"api/provider_data/v1/model/#cmsgov.provider_data.v1.model.SearchFacetsGetResponse","title":"SearchFacetsGetResponse","text":"<pre><code>SearchFacetsGetResponse(\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[str, sob.abc.MarshallableTypes]\n        | typing.Iterable[\n            tuple[str, sob.abc.MarshallableTypes]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    facets: (\n        cmsgov.provider_data.v1.model.Facets | None\n    ) = None,\n    time: float | int | decimal.Decimal | None = None,\n    results: sob.Array | sob.Dictionary | None = None,\n    total: str | int | None = None,\n)\n</code></pre> <p>               Bases: <code>sob.Object</code></p> <p>Attributes:</p> <ul> <li> <code>facets</code>               (<code>cmsgov.provider_data.v1.model.Facets | None</code>)           \u2013            <p>Array of facet values.</p> </li> <li> <code>time</code>               (<code>float | int | decimal.Decimal | None</code>)           \u2013            <p>Execution time.</p> </li> <li> <code>results</code>               (<code>sob.Array | sob.Dictionary | None</code>)           \u2013            <p>An object with keys following the format \"dkan_dataset/[ uuid]\", containing full dataset objects from the DKAN metastore.</p> </li> <li> <code>total</code>               (<code>str | int | None</code>)           \u2013            <p>Total search results for query.</p> </li> </ul> Source code in <code>src/cmsgov/provider_data/v1/model.py</code> <pre><code>def __init__(\n    self,\n    _data: (\n        sob.abc.Dictionary\n        | typing.Mapping[\n            str,\n            sob.abc.MarshallableTypes\n        ]\n        | typing.Iterable[\n            tuple[\n                str,\n                sob.abc.MarshallableTypes\n            ]\n        ]\n        | sob.abc.Readable\n        | typing.IO\n        | str\n        | bytes\n        | None\n    ) = None,\n    facets: (\n        Facets\n        | None\n    ) = None,\n    time: (\n        float\n        | int\n        | decimal.Decimal\n        | None\n    ) = None,\n    results: (\n        sob.Array\n        | sob.Dictionary\n        | None\n    ) = None,\n    total: (\n        str\n        | int\n        | None\n    ) = None\n) -&gt; None:\n    self.facets: (\n        Facets\n        | None\n    ) = facets\n    self.time: (\n        float\n        | int\n        | decimal.Decimal\n        | None\n    ) = time\n    self.results: (\n        sob.Array\n        | sob.Dictionary\n        | None\n    ) = results\n    self.total: (\n        str\n        | int\n        | None\n    ) = total\n    super().__init__(_data)\n</code></pre>"}]}