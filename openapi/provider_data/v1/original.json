{
    "openapi": "3.0.2",
    "info": {
        "title": "API Documentation",
        "version": "v1"
    },
    "components": {
        "securitySchemes": {
            "basic_auth": {
                "type": "http",
                "scheme": "basic"
            }
        },
        "responses": {
            "400BadJson": {
                "description": "Bad request, usually JSON schema validation failure.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        },
                        "example": {
                            "message": "JSON Schema validation failed.",
                            "status": 400,
                            "timestamp": "2021-06-14T13:46:06+00:00",
                            "data": {
                                "keyword": "type",
                                "pointer": "path/to/invalid/json/property",
                                "message": "The attribute expected to be of type ''object'' but 'array' given."
                            }
                        }
                    }
                }
            },
            "404IdNotFound": {
                "description": "Not found, usually due to incorrect identifier.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        },
                        "example": {
                            "message": "Error retrieving metadata: 00000000-0000-0000-0000-000000000000 not found.",
                            "status": 404,
                            "timestamp": "2021-06-14T13:46:06+00:00"
                        }
                    }
                }
            },
            "200DatastoreCsvOk": {
                "description": "Ok, CSV successfully generated.",
                "content": {
                    "text/csv": {
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "200JsonOrCsvQueryOk": {
                "description": "Ok. JSON or CSV datastore response, depending on query.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "results": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                },
                                "count": {
                                    "type": "integer"
                                },
                                "schema": {
                                    "type": "object",
                                    "description": "Schema of all resources queries, keyed by ID."
                                },
                                "query": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "text/csv": {
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "200MetadataUpdated": {
                "description": "Metadata update successful.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/metastoreWriteResponse"
                        }
                    }
                }
            },
            "201MetadataCreated": {
                "description": "Metadata creation successful.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/metastoreWriteResponse"
                        }
                    }
                }
            },
            "409MetadataAlreadyExists": {
                "description": "Conflict; tried to create a record using an existing ID, or metadata contains identifier that doesn't match the request path.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        },
                        "example": {
                            "message": "dataset/00000000-0000-0000-0000-000000000000 already exists.",
                            "status": 409,
                            "timestamp": "2021-06-14T13:46:06+00:00"
                        }
                    }
                }
            },
            "404MetadataObjectNotFound": {
                "description": "Missing object, usually due to incorrect identifier.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        },
                        "example": {
                            "message": "No data with the identifier 00000000-0000-0000-0000-000000000000 was found.",
                            "status": 404,
                            "timestamp": "2021-06-14T13:46:06+00:00"
                        }
                    }
                }
            }
        },
        "schemas": {
            "errorResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Error message."
                    },
                    "status": {
                        "type": "integer"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "data": {
                        "type": "object",
                        "description": "Arbitrary object storing more detailed data on the error message."
                    }
                }
            },
            "datastoreQuery": {
                "title": "Datastore Query",
                "description": "Schema for DKAN datastore queries",
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "array",
                        "title": "Resources",
                        "description": "Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "alias": {
                                    "type": "string",
                                    "description": "Alias to use to refer to this resource elsewhere in the query."
                                }
                            }
                        }
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/datastoreQueryResource"
                                },
                                {
                                    "type": "object",
                                    "title": "Aliased property from specific resource",
                                    "properties": {
                                        "resource": {
                                            "$ref": "#/components/schemas/datastoreQueryResource"
                                        },
                                        "property": {
                                            "$ref": "#/components/schemas/datastoreQueryProperty"
                                        },
                                        "alias": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "resource",
                                        "property"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "title": "Aliased expression",
                                    "properties": {
                                        "expression": {
                                            "$ref": "#/components/schemas/datastoreQueryExpression"
                                        },
                                        "alias": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "expression",
                                        "alias"
                                    ]
                                }
                            ]
                        }
                    },
                    "conditions": {
                        "type": "array",
                        "description": "Conditions or groups of conditions for the query, bound by 'and' operator.",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/datastoreQueryCondition"
                                },
                                {
                                    "$ref": "#/components/schemas/datastoreQueryConditionGroup"
                                }
                            ]
                        }
                    },
                    "joins": {
                        "type": "array",
                        "description": "Joins",
                        "items": {
                            "type": "object",
                            "properties": {
                                "resource": {
                                    "$ref": "#/components/schemas/datastoreQueryResource"
                                },
                                "condition": {
                                    "$ref": "#/components/schemas/datastoreQueryCondition"
                                }
                            },
                            "required": [
                                "resource",
                                "condition"
                            ]
                        }
                    },
                    "groupings": {
                        "type": "array",
                        "description": "Properties or aliases to group results by.",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/datastoreQueryResource"
                                },
                                {
                                    "$ref": "#/components/schemas/datastoreQueryResourceProperty"
                                }
                            ]
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Limit for maximum number of records returned. Pass zero for no limit (may be restricted by user permissions)."
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Number of records to offset by or skip before returning first record.",
                        "default": 0
                    },
                    "sorts": {
                        "type": "array",
                        "description": "Result sorting directives.",
                        "items": {
                            "$ref": "#/components/schemas/datastoreQuerySort"
                        }
                    },
                    "count": {
                        "description": "Return a count of the total rows returned by the query, ignoring the limit/offset.",
                        "type": "boolean",
                        "default": true
                    },
                    "results": {
                        "description": "Return the result set. Set to false and set count to true to receive only a count of matches.",
                        "type": "boolean",
                        "default": true
                    },
                    "schema": {
                        "description": "Return the schema for the datastore collection.",
                        "type": "boolean",
                        "default": true
                    },
                    "keys": {
                        "description": "Return results as an array of keyed objects, with the column machine names as keys. If false, results will be an array of simple arrays of values.",
                        "type": "boolean",
                        "default": true
                    },
                    "format": {
                        "type": "string",
                        "description": "Format to return data in. Default is JSON, can be set to CSV.",
                        "enum": [
                            "csv",
                            "json"
                        ],
                        "default": "json"
                    },
                    "rowIds": {
                        "description": "Flag to include the result_number column in output. Default is FALSE",
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "datastoreResourceQuery": {
                "title": "Datastore Resource Query",
                "description": "Schema for DKAN datastore queries. When querying against a specific resource, the \"resource\" property is always optional. If you want to set it explicitly, note that it will be aliased to simply \"t\".",
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/datastoreQueryResource"
                                },
                                {
                                    "type": "object",
                                    "title": "Aliased property from specific resource",
                                    "properties": {
                                        "resource": {
                                            "$ref": "#/components/schemas/datastoreQueryResource"
                                        },
                                        "property": {
                                            "$ref": "#/components/schemas/datastoreQueryProperty"
                                        },
                                        "alias": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "resource",
                                        "property"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "title": "Aliased expression",
                                    "properties": {
                                        "expression": {
                                            "$ref": "#/components/schemas/datastoreQueryExpression"
                                        },
                                        "alias": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "expression",
                                        "alias"
                                    ]
                                }
                            ]
                        }
                    },
                    "conditions": {
                        "type": "array",
                        "description": "Conditions or groups of conditions for the query, bound by 'and' operator.",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/datastoreQueryCondition"
                                },
                                {
                                    "$ref": "#/components/schemas/datastoreQueryConditionGroup"
                                }
                            ]
                        }
                    },
                    "groupings": {
                        "type": "array",
                        "description": "Properties or aliases to group results by.",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/datastoreQueryResource"
                                },
                                {
                                    "$ref": "#/components/schemas/datastoreQueryResourceProperty"
                                }
                            ]
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Limit for maximum number of records returned. Pass zero for no limit (may be restricted by user permissions)."
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Number of records to offset by or skip before returning first record.",
                        "default": 0
                    },
                    "sorts": {
                        "type": "array",
                        "description": "Result sorting directives.",
                        "items": {
                            "$ref": "#/components/schemas/datastoreQuerySort"
                        }
                    },
                    "count": {
                        "description": "Return a count of the total rows returned by the query, ignoring the limit/offset.",
                        "type": "boolean",
                        "default": true
                    },
                    "results": {
                        "description": "Return the result set. Set to false and set count to true to receive only a count of matches.",
                        "type": "boolean",
                        "default": true
                    },
                    "schema": {
                        "description": "Return the schema for the datastore collection.",
                        "type": "boolean",
                        "default": true
                    },
                    "keys": {
                        "description": "Return results as an array of keyed objects, with the column machine names as keys. If false, results will be an array of simple arrays of values.",
                        "type": "boolean",
                        "default": true
                    },
                    "format": {
                        "type": "string",
                        "description": "Format to return data in. Default is JSON, can be set to CSV.",
                        "enum": [
                            "csv",
                            "json"
                        ],
                        "default": "json"
                    },
                    "rowIds": {
                        "description": "Flag to include the result_number column in output. Default is FALSE",
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "datastoreQueryResource": {
                "type": "string",
                "description": "Alias to resource set in resources array. Not needed when only querying against one resource.",
                "title": "Datastore Query: resource"
            },
            "datastoreQueryProperty": {
                "type": "string",
                "description": "The property/column or alias to filter by. Should not include collection/table alias.",
                "pattern": "^[^.]+$",
                "title": "Datastore Query: property"
            },
            "datastoreQueryResourceProperty": {
                "type": "object",
                "description": "Property name with optional collection/table alias.",
                "properties": {
                    "resource": {
                        "$ref": "#/components/schemas/datastoreQueryResource"
                    },
                    "property": {
                        "$ref": "#/components/schemas/datastoreQueryProperty"
                    }
                },
                "required": [
                    "property"
                ],
                "title": "Datastore Query: resourceProperty"
            },
            "datastoreQueryConditionGroup": {
                "type": "object",
                "title": "Datastore Query: Conditional group",
                "description": "Group of conditions bound by 'and'/'or' operators.",
                "properties": {
                    "groupOperator": {
                        "type": "string",
                        "enum": [
                            "and",
                            "or"
                        ]
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/datastoreQueryCondition"
                                },
                                {
                                    "$ref": "#/components/schemas/datastoreQueryConditionGroup"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "conditions"
                ]
            },
            "datastoreQueryCondition": {
                "type": "object",
                "title": "Datastore Query: Condition",
                "description": "Condition object including property, value and operator. If querying only one resource, the \"resource\" does not need to be specified.",
                "properties": {
                    "resource": {
                        "$ref": "#/components/schemas/datastoreQueryResource"
                    },
                    "property": {
                        "$ref": "#/components/schemas/datastoreQueryProperty"
                    },
                    "value": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                }
                            },
                            {
                                "$ref": "#/components/schemas/datastoreQueryResourceProperty"
                            }
                        ],
                        "description": "The value to filter against."
                    },
                    "operator": {
                        "type": "string",
                        "description": "Condition operator",
                        "enum": [
                            "=",
                            "<>",
                            "<",
                            "<=",
                            ">",
                            ">=",
                            "like",
                            "between",
                            "in",
                            "not in",
                            "is_empty",
                            "not_empty",
                            "contains",
                            "starts with",
                            "match"
                        ],
                        "default": "="
                    }
                },
                "required": [
                    "property",
                    "value"
                ]
            },
            "datastoreQueryExpression": {
                "type": "object",
                "title": "Datastore Query: Expression",
                "description": "Arithmetic or aggregate expression performed on one or more properties.",
                "properties": {
                    "operator": {
                        "type": "string",
                        "description": "Expression operator. Note that performing expressions on text or other non-numeric data types my yield unexpected results.",
                        "enum": [
                            "+",
                            "-",
                            "*",
                            "/",
                            "%",
                            "sum",
                            "count",
                            "avg",
                            "max",
                            "min"
                        ]
                    },
                    "operands": {
                        "type": "array",
                        "description": "Arithmetic operators will require two operands, aggregate operators should take only one. Do not combine arithmetic and aggregate operators in a single query.",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "number",
                                    "title": "Number"
                                },
                                {
                                    "$ref": "#/components/schemas/datastoreQueryProperty"
                                },
                                {
                                    "$ref": "#/components/schemas/datastoreQueryResourceProperty"
                                },
                                {
                                    "type": "object",
                                    "title": "Expression",
                                    "properties": {
                                        "expression": {
                                            "$ref": "#/components/schemas/datastoreQueryExpression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "datastoreQuerySort": {
                "type": "object",
                "description": "Properties to sort by in a particular order.",
                "properties": {
                    "resource": {
                        "$ref": "#/components/schemas/datastoreQueryResource"
                    },
                    "property": {
                        "$ref": "#/components/schemas/datastoreQueryProperty"
                    },
                    "order": {
                        "type": "string",
                        "description": "Order to sort in, lowercase.",
                        "enum": [
                            "asc",
                            "desc"
                        ]
                    }
                },
                "title": "Datastore Query: sort"
            },
            "harvestPlan": {
                "type": "object",
                "required": [
                    "identifier",
                    "extract",
                    "load"
                ],
                "properties": {
                    "identifier": {
                        "type": "string"
                    },
                    "extract": {
                        "type": "object",
                        "required": [
                            "type",
                            "uri"
                        ],
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "uri": {
                                "type": "string"
                            }
                        }
                    },
                    "load": {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "metastoreWriteResponse": {
                "type": "object",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "Path to the metadata from the API."
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for metadata just created or modified."
                    }
                },
                "additionalProperties": false
            },
            "metastoreRevision": {
                "type": "object",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Revision identifier."
                    },
                    "published": {
                        "type": "boolean",
                        "description": "Is this the currently published revision?."
                    },
                    "message": {
                        "type": "string",
                        "description": "Revision log message."
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of this revision/modification."
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "published",
                            "hidden",
                            "archived",
                            "orphaned"
                        ],
                        "description": "The workflow state of this revision. Currently five states are supported in DKAN."
                    }
                }
            },
            "metastoreNewRevision": {
                "type": "object",
                "description": "When creating a new revision, you may only submit a message and state.",
                "additionalProperties": false,
                "required": [
                    "state"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Revision log message."
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "published",
                            "hidden",
                            "archived",
                            "orphaned"
                        ],
                        "description": "The workflow state of this revision. Currently five states are supported in DKAN."
                    }
                }
            },
            "dataset": {
                "title": "Project Open Data Dataset",
                "description": "The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).",
                "type": "object",
                "required": [
                    "bureauCode",
                    "programCode",
                    "title",
                    "description",
                    "keyword",
                    "modified",
                    "released",
                    "publisher",
                    "contactPoint",
                    "identifier",
                    "accessLevel"
                ],
                "properties": {
                    "@type": {
                        "title": "Metadata Context",
                        "type": "string",
                        "description": "IRI for the JSON-LD data type. This should be dcat:Dataset for each Dataset.",
                        "default": "dcat:Dataset"
                    },
                    "title": {
                        "title": "Title",
                        "description": "Human-readable name of the asset. Should be in plain English and include sufficient detail to facilitate search and discovery.",
                        "type": "string",
                        "minLength": 1
                    },
                    "identifier": {
                        "title": "Unique Identifier",
                        "description": "A unique identifier for the dataset or API as maintained within an Agency catalog or database.",
                        "type": "string",
                        "minLength": 1
                    },
                    "description": {
                        "title": "Description",
                        "description": "Human-readable description (e.g., an abstract) with sufficient detail to enable a user to quickly understand whether the asset is of interest.",
                        "type": "string",
                        "minLength": 1
                    },
                    "accessLevel": {
                        "description": "The degree to which this dataset could be made publicly-available, regardless of whether it has been made available. Choices: public (Data asset is or could be made publicly available to all without restrictions), restricted public (Data asset is available under certain use restrictions), or non-public (Data asset is not available to members of the public).",
                        "title": "Public Access Level",
                        "type": "string",
                        "enum": [
                            "public",
                            "restricted public",
                            "private",
                            "non-public"
                        ],
                        "default": "public"
                    },
                    "rights": {
                        "title": "Rights",
                        "description": "This may include information regarding access or restrictions based on privacy, security, or other policies. This should also provide an explanation for the selected \"accessLevel\" including instructions for how to access a restricted file, if applicable, or explanation for why a \"non-public\" or \"restricted public\" data assetis not \"public,\" if applicable. Text, 255 characters.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255,
                        "nullable": true
                    },
                    "accrualPeriodicity": {
                        "title": "Frequency",
                        "description": "Frequency with which dataset is published.",
                        "type": "string",
                        "enum": [
                            "R/P10Y",
                            "R/P4Y",
                            "R/P1Y",
                            "R/P2M",
                            "R/P3.5D",
                            "R/P1D",
                            "R/P2W",
                            "R/P6M",
                            "R/P2Y",
                            "R/P3Y",
                            "R/P0.33W",
                            "R/P0.33M",
                            "R/PT1S",
                            "R/P1M",
                            "R/P3M",
                            "R/P0.5M",
                            "R/P4M",
                            "R/P1W",
                            "R/PT1H",
                            "irregular"
                        ]
                    },
                    "describedBy": {
                        "title": "Data Dictionary",
                        "description": "URL to the data dictionary for the dataset or API. Note that documentation other than a data dictionary can be referenced using Related Documents as shown in the expanded fields.",
                        "type": "string",
                        "format": "uri"
                    },
                    "describedByType": {
                        "title": "Data Dictionary Type",
                        "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.",
                        "type": "string"
                    },
                    "issued": {
                        "title": "Issue Date",
                        "description": "Date of formal issuance.",
                        "type": "string"
                    },
                    "modified": {
                        "title": "Last Modified",
                        "description": "Most recent date on which the dataset was changed, updated or modified.",
                        "type": "string"
                    },
                    "released": {
                        "title": "Release Date",
                        "description": "Date on which the dataset is scheduled to be published.",
                        "type": "string"
                    },
                    "nextUpdateDate": {
                        "title": "Next Update Date",
                        "description": "The date on which the dataset is expected to be updated next.",
                        "type": "string"
                    },
                    "license": {
                        "title": "License",
                        "description": "The license dataset or API is published with. See <a href=\"https://project-open-data.cio.gov/open-licenses/\">Open Licenses</a> for more information.",
                        "type": "string",
                        "format": "uri"
                    },
                    "spatial": {
                        "title": "Spatial",
                        "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#spatial\">spatial coverage</a> of the dataset. Could include a spatial region like a bounding box or a named place.",
                        "type": "string",
                        "minLength": 1
                    },
                    "temporal": {
                        "title": "Temporal",
                        "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#temporal\">start and end dates</a> for which the dataset is applicable, separated by a \"/\" (i.e., 2000-01-15T00:45:00Z/2010-01-15T00:06:00Z).",
                        "type": "string"
                    },
                    "isPartOf": {
                        "title": "Collection",
                        "description": "The collection of which the dataset is a subset.",
                        "type": "string",
                        "minLength": 1
                    },
                    "publisher": {
                        "title": "Organization",
                        "description": "A Dataset Publisher Organization.",
                        "type": "object",
                        "required": [
                            "name"
                        ],
                        "properties": {
                            "@type": {
                                "title": "Metadata Context",
                                "description": "IRI for the JSON-LD data type. This should be org:Organization for each publisher",
                                "type": "string",
                                "default": "org:Organization"
                            },
                            "name": {
                                "title": "Publisher Name",
                                "description": "",
                                "type": "string",
                                "minLength": 1
                            },
                            "subOrganizationOf": {
                                "title": "Parent Organization",
                                "type": "string"
                            }
                        }
                    },
                    "bureauCode": {
                        "title": "Bureau Code",
                        "description": "Federal agencies, combined agency and bureau code from <a href=\"http://www.whitehouse.gov/sites/default/files/omb/assets/a11_current_year/app_c.pdf\">OMB Circular A-11, Appendix C</a> in the format of <code>015:010</code>.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "pattern": "[0-9]{3}:[0-9]{2}"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "programCode": {
                        "title": "Program Code",
                        "description": "Federal agencies, list the primary program related to this data asset, from the <a href=\"http://goals.performance.gov/sites/default/files/images/FederalProgramInventory_FY13_MachineReadable_091613.xls\">Federal Program Inventory</a>. Use the format of <code>015:001</code>",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "contactPoint": {
                        "title": "Project Open Data ContactPoint vCard",
                        "description": "A Dataset ContactPoint as a vCard object.",
                        "type": "object",
                        "required": [
                            "fn"
                        ],
                        "oneOf": [
                            {
                                "type": "object",
                                "required": [
                                    "hasEmail"
                                ]
                            },
                            {
                                "type": "object",
                                "required": [
                                    "hasURL"
                                ]
                            }
                        ],
                        "properties": {
                            "@type": {
                                "title": "Metadata Context",
                                "description": "IRI for the JSON-LD data type. This should be vcard:Contact for contactPoint.",
                                "enum": [
                                    "vcard:Contact"
                                ],
                                "type": "string"
                            },
                            "fn": {
                                "title": "Contact Name",
                                "description": "A full formatted name, e.g. Firstname Lastname.",
                                "type": "string",
                                "minLength": 1
                            },
                            "hasEmail": {
                                "title": "Email",
                                "description": "Email address for the contact name.",
                                "pattern": "^mailto:[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$|[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$",
                                "type": "string"
                            },
                            "hasURL": {
                                "title": "URL",
                                "description": "URL for the contact",
                                "format": "uri",
                                "type": "string"
                            }
                        }
                    },
                    "theme": {
                        "title": "Category",
                        "description": "Main thematic category of the dataset.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "title": "Category",
                            "minLength": 1
                        },
                        "uniqueItems": true
                    },
                    "keyword": {
                        "title": "Tags",
                        "description": "Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non-technical users.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "title": "Tag",
                            "minLength": 1
                        },
                        "minItems": 1
                    },
                    "distribution": {
                        "title": "Distribution",
                        "description": "A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.",
                        "type": "array",
                        "items": {
                            "title": "Data File",
                            "type": "object",
                            "properties": {
                                "@type": {
                                    "title": "Metadata Context",
                                    "description": "IRI for the JSON-LD data type. This should be dcat:Distribution for each Distribution.",
                                    "default": "dcat:Distribution",
                                    "type": "string",
                                    "readOnly": true
                                },
                                "title": {
                                    "title": "Title",
                                    "description": "Human-readable name of the file.",
                                    "type": "string",
                                    "minLength": 1
                                },
                                "description": {
                                    "title": "Description",
                                    "description": "Human-readable description of the file.",
                                    "type": "string",
                                    "minLength": 1
                                },
                                "format": {
                                    "title": "Format",
                                    "description": "A human-readable description of the file format of a distribution (i.e. csv, pdf, kml, etc.).",
                                    "type": "string"
                                },
                                "mediaType": {
                                    "title": "Media Type",
                                    "description": "The machine-readable file format (<a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">IANA Media Type or MIME Type</a>) of the distribution\u2019s downloadURL.",
                                    "type": "string"
                                },
                                "downloadURL": {
                                    "title": "Download URL",
                                    "description": "URL providing direct access to a downloadable file of a dataset.",
                                    "type": "string",
                                    "anyOf": [
                                        {
                                            "format": "uri"
                                        }
                                    ]
                                },
                                "accessURL": {
                                    "title": "Access URL",
                                    "description": "URL providing indirect access to a dataset.",
                                    "type": "string",
                                    "format": "uri"
                                },
                                "conformsTo": {
                                    "title": "Data Standard",
                                    "description": "URI used to identify a standardized specification the distribution conforms to.",
                                    "type": "string",
                                    "format": "uri"
                                },
                                "describedBy": {
                                    "title": "Data Dictionary",
                                    "description": "URL to the data dictionary for the distribution found at the downloadURL.",
                                    "type": "string",
                                    "format": "uri"
                                },
                                "describedByType": {
                                    "title": "Data Dictionary Type",
                                    "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.",
                                    "pattern": "^[a-z]+?$",
                                    "type": "string"
                                }
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    },
                    "references": {
                        "title": "Related Documents",
                        "description": "Related documents such as technical information about a dataset, developer documentation, etc.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "archiveExclude": {
                        "title": "Exclude from Archive",
                        "description": "For excluding this dataset from its provider's 'download all datasets'.",
                        "type": "boolean"
                    }
                }
            },
            "facets": {
                "type": "array",
                "description": "Array of facet values.",
                "items": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Machine name for the metastore property to filter on."
                        },
                        "name": {
                            "type": "string",
                            "description": "The facet filter value, for instance, the tet of a keyword to filter by"
                        },
                        "total": {
                            "type": "integer",
                            "description": "Number of results in the current result set that match this filter."
                        }
                    }
                }
            }
        },
        "parameters": {
            "datastoreUuid": {
                "name": "identifier",
                "in": "path",
                "description": "A datastore id. Note: there is an inconsistency in this API that will be addressed in the future: The expected format is different from the format supplied in /api/1/datastore/imports.",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "00000000000000000000000000000000__0000000000__source"
            },
            "datastoreDistributionUuid": {
                "name": "distributionId",
                "in": "path",
                "description": "A distribution ID",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "1ee2fea0-00a3-58f4-8717-89b3cd62e442"
            },
            "datastoreDatasetUuid": {
                "name": "datasetId",
                "in": "path",
                "description": "A dataset ID",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "0ba7-2cb0"
            },
            "datastoreDistributionIndex": {
                "name": "index",
                "in": "path",
                "description": "The index of a distribution in a dataset's distribution array. For instance, the first distribution in a dataset would have an index of \"0,\" the second would have \"1\", etc.",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "0"
            },
            "datastoreQueryLimit": {
                "name": "limit",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/limit"
                }
            },
            "datastoreQueryOffset": {
                "name": "offset",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/offset"
                }
            },
            "datastoreQueryCount": {
                "name": "count",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/count"
                }
            },
            "datastoreQueryResults": {
                "name": "results",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/results"
                }
            },
            "datastoreQuerySchema": {
                "name": "schema",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/schema"
                }
            },
            "datastoreQueryKeys": {
                "name": "keys",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/keys"
                }
            },
            "datastoreQueryFormat": {
                "name": "format",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/format"
                }
            },
            "datastoreQueryRowIds": {
                "name": "rowIds",
                "in": "query",
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "$ref": "#/components/schemas/datastoreQuery/properties/rowIds"
                }
            },
            "harvestPlanId": {
                "name": "plan_id",
                "in": "path",
                "description": "A harvest plan identifier",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "dialysis__data"
            },
            "harvestPlanIdQuery": {
                "name": "plan",
                "in": "query",
                "description": "A harvest plan identifier",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "style": "form",
                "example": "dialysis__data"
            },
            "harvestRunId": {
                "name": "run_id",
                "in": "path",
                "description": "A harvest run identifier",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "HARVEST-RUN-ID"
            },
            "showReferenceIds": {
                "name": "show-reference-ids",
                "in": "query",
                "description": "Metastore objects often include references to other objects stored in other schemas. These references are usually hidden in responses. Some identifiers are necessary to work with other API endpoints (e.g. datastore endpoints may require the distribution identifier). Add `?show-reference-ids` to show the identifiers generated by DKAN.",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "style": "form",
                "allowEmptyValue": true
            },
            "schemaId": {
                "name": "schema_id",
                "in": "path",
                "description": "The name a of a specific schema. For instance, \"dataset.\"",
                "schema": {
                    "type": "string"
                },
                "required": true,
                "allowEmptyValue": false,
                "examples": {
                    "dataset": {
                        "value": "dataset"
                    },
                    "publisher": {
                        "value": "publisher"
                    },
                    "distribution": {
                        "value": "distribution"
                    },
                    "theme": {
                        "value": "theme"
                    },
                    "keyword": {
                        "value": "keyword"
                    },
                    "data-dictionary": {
                        "value": "data-dictionary"
                    }
                }
            },
            "datasetUuid": {
                "name": "identifier",
                "in": "path",
                "description": "A dataset identifier",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "0ba7-2cb0"
            },
            "exampleUuid": {
                "name": "identifier",
                "in": "path",
                "description": "A dataset identifier",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "0ba7-2cb0"
            }
        }
    },
    "paths": {
        "/provider-data/api/1/datastore/imports": {
            "get": {
                "operationId": "datastore-list",
                "summary": "List datastores",
                "description": "Returns a list of all stored importers, with data about their file fetcher and status.\n",
                "tags": [
                    "Datastore: import"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "operationId": "datastore-import",
                "summary": "Datastore import",
                "description": "Immediately starts the import process for a datastore.\n",
                "tags": [
                    "Datastore: import"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "resource_id"
                                ],
                                "properties": {
                                    "plan_id": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/imports/{identifier}": {
            "get": {
                "operationId": "datastore-get",
                "summary": "Datastore statistics",
                "description": "Returns the numbers of rows and columns, and a list of columns headers from the datastore.\n",
                "tags": [
                    "Datastore: import"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreUuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "numOfRows",
                                        "numOfColumns",
                                        "columns"
                                    ],
                                    "properties": {
                                        "numOfRows": {
                                            "type": "integer"
                                        },
                                        "numOfColumns": {
                                            "type": "integer"
                                        },
                                        "columns": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "datastore-delete",
                "summary": "Delete a datastore",
                "description": "Delete one or more datastores. If the uuid parameter is that of a resource, delete that resource. If the uuid parameter is that of a dataset, delete all resources of that dataset.\n",
                "tags": [
                    "Datastore: import"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreUuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dataset has been deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "message"
                                    ],
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/query": {
            "post": {
                "operationId": "datastore-query-post",
                "summary": "Query one or more datastore resources",
                "tags": [
                    "Datastore: query"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/datastoreQuery"
                            },
                            "example": {
                                "conditions": [
                                    {
                                        "resource": "t",
                                        "property": "record_number",
                                        "value": 1,
                                        "operator": ">"
                                    }
                                ],
                                "limit": 3,
                                "resources": [
                                    {
                                        "id": "1ee2fea0-00a3-58f4-8717-89b3cd62e442",
                                        "alias": "t"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200JsonOrCsvQueryOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    }
                }
            },
            "get": {
                "operationId": "datastore-query-get",
                "summary": "Query one or more datastore resources",
                "description": "Simple GET equivalent of a POST query. Note that parameters containing arrays or objects are not yet supported by SwaggerUI. For conditions, sorts, and other complex parameters, write your query in JSON and then convert to a nested query string. See [this web tool](https://www.convertonline.io/convert/json-to-query-string) for an example.",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreQueryLimit"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryOffset"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryCount"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryResults"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQuerySchema"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryKeys"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryFormat"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryRowIds"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200JsonOrCsvQueryOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/query/download": {
            "post": {
                "operationId": "datastore-query-download-post",
                "summary": "Query one or more datastore resources for file download",
                "tags": [
                    "Datastore: query"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/datastoreQuery"
                            },
                            "example": {
                                "conditions": [
                                    {
                                        "resource": "t",
                                        "property": "record_number",
                                        "value": 1,
                                        "operator": ">"
                                    }
                                ],
                                "limit": 3,
                                "resources": [
                                    {
                                        "id": "1ee2fea0-00a3-58f4-8717-89b3cd62e442",
                                        "alias": "t"
                                    }
                                ],
                                "format": "csv"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200DatastoreCsvOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            },
            "get": {
                "operationId": "datastore-query-download-get",
                "summary": "Query one or more datastore resources for file download with get",
                "description": "Simple GET equivalent of a POST query. Note that parameters containing arrays or objects are not yet supported by SwaggerUI. For conditions, sorts, and other complex parameters, write your query in JSON and then convert to a nested query string. See [this web tool](https://www.convertonline.io/convert/json-to-query-string) for an example.",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreQueryLimit"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryOffset"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryCount"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryResults"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQuerySchema"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryKeys"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryFormat"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryRowIds"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200DatastoreCsvOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/query/{distributionId}": {
            "post": {
                "operationId": "datastore-resource-query-post",
                "summary": "Query a single datastore resource",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreDistributionUuid"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/datastoreResourceQuery"
                            },
                            "example": {
                                "conditions": [
                                    {
                                        "resource": "t",
                                        "property": "record_number",
                                        "value": 1,
                                        "operator": ">"
                                    }
                                ],
                                "limit": 3
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200JsonOrCsvQueryOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            },
            "get": {
                "operationId": "datastore-resource-query-get",
                "summary": "Query a single datastore resource with get",
                "description": "Simple GET equivalent of a POST query. Note that parameters containing arrays or objects are not yet supported by SwaggerUI. For conditions, sorts, and other complex parameters, write your query in JSON and then convert to a nested query string. See [this web tool](https://www.convertonline.io/convert/json-to-query-string) for an example.",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreDistributionUuid"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryLimit"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryOffset"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryCount"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryResults"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQuerySchema"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryKeys"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryFormat"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryRowIds"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200JsonOrCsvQueryOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/query/{datasetId}/{index}": {
            "post": {
                "operationId": "datastore-datasetindex-query-post",
                "summary": "Query a single datastore resource",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreDatasetUuid"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreDistributionIndex"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/datastoreResourceQuery"
                            },
                            "example": {
                                "conditions": [
                                    {
                                        "resource": "t",
                                        "property": "record_number",
                                        "value": 1,
                                        "operator": ">"
                                    }
                                ],
                                "limit": 3
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200JsonOrCsvQueryOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            },
            "get": {
                "operationId": "datastore-datasetindex-query-get",
                "summary": "Query a single datastore resource with get",
                "description": "Simple GET equivalent of a POST query -- see the POST endpoint documentation for full query schema. A few basic parameters are provided here as examples. For more reliable queries, write your query in JSON and then convert to a query string. See [this web tool](https://www.convertonline.io/convert/json-to-query-string) for an example.",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreDatasetUuid"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreDistributionIndex"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryLimit"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryOffset"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryCount"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryResults"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQuerySchema"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryKeys"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryFormat"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreQueryRowIds"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200JsonOrCsvQueryOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/query/{distributionId}/download": {
            "get": {
                "operationId": "datastore-resource-query-download-get",
                "summary": "Query a single datastore resource for file download",
                "description": "Like the other datastore query GET endpoints, additional parameters may be added by serializing a query JSON object (documented in the POST endpoints) into a query string.",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreDistributionUuid"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "csv",
                        "description": "Response format. Currently, only csv is supported.",
                        "style": "deepObject"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200DatastoreCsvOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/query/{datasetId}/{index}/download": {
            "get": {
                "operationId": "datastore-datasetindex-query-download-get",
                "summary": "Query a single datastore resource for file download",
                "description": "Like the other datastore query GET endpoints, additional parameters may be added by serializing a query JSON object (documented in the POST endpoints) into a query string.",
                "tags": [
                    "Datastore: query"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datastoreDatasetUuid"
                    },
                    {
                        "$ref": "#/components/parameters/datastoreDistributionIndex"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "csv",
                        "description": "Response format. Currently, only csv is supported.",
                        "style": "deepObject"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200DatastoreCsvOk"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            }
        },
        "/provider-data/api/1/datastore/sql": {
            "get": {
                "operationId": "datastore-sql",
                "summary": "Query resources in datastore",
                "description": "Interact with resources in the datastore using an SQL-like syntax.\n",
                "tags": [
                    "Datastore: SQL Query"
                ],
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "A SQL-like query.\n\nA `SELECT` using the `show_db_columns` parameter will make it easier to build queries against the data as\nit returns columns without spaces and in some cases, truncated names where the human readable column header\nis very long.\n\n`/api/1/datastore/sql?query=[SELECT * FROM DATASTORE_UUID][LIMIT 1 OFFSET 0];&show_db_columns`\n\nYou can then build the `SELECT` part of the query. Do not use spaces between its arguments.\n\n`/api/1/datastore/sql?query=[SELECT a,b,c, FROM DATASTORE_UUID]`\n\n`WHERE` can use any column in the data.\n\n`/api/1/datastore/sql?query=[SELECT a,b FROM DATASTORE_UUID][WHERE c = \"CCC\"];&show_db_columns`\n\n`LIMIT` and `OFFSET` allow you to get more than the 500 record limit, by using successive queries:\n\n`/api/1/datastore/sql?query=[SELECT a,b,c FROM DATASTORE_UUID][WHERE d = \"CCC\"][LIMIT 500 OFFSET 0];&show_db_columns`\n\n`/api/1/datastore/sql?query=[SELECT a,b,c FROM DATASTORE_UUID][WHERE d = \"DDD\"][LIMIT 500 OFFSET 500];&show_db_columns`\n\nNote: `SELECT`, `WHERE` and `LIMIT...OFFSET` clauses must each be included within brackets `[ ]`.\n",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "example": "[SELECT * FROM 1ee2fea0-00a3-58f4-8717-89b3cd62e442][LIMIT 2]"
                    },
                    {
                        "name": "show_db_columns",
                        "in": "query",
                        "description": "Add `&show_db_columns` to return columns without spaces and in some cases, truncated names where the human\nreadable column header is very long.\n",
                        "schema": {
                            "type": "boolean"
                        },
                        "style": "form",
                        "allowEmptyValue": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok. Query successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "description": "Simple result row, key/value pairs."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provider-data/api/1/harvest/plans": {
            "get": {
                "operationId": "harvest-get-all",
                "summary": "List harvest identifiers",
                "description": "Lists the identifiers of all registered harvests.\n",
                "tags": [
                    "Harvest"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "operationId": "harvest-register",
                "summary": "Register a new harvest",
                "description": "Registers a new harvest, after validating against our schema.\n",
                "tags": [
                    "Harvest"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/harvestPlan"
                            },
                            "example": {
                                "identifier": "h1",
                                "extract": {
                                    "type": "\\Drupal\\harvest\\ETL\\Extract\\DataJson",
                                    "uri": "https://dkan-default-content-files.s3.amazonaws.com/data.json"
                                },
                                "transforms": [],
                                "load": {
                                    "type": "\\Drupal\\harvest\\Load\\Dataset"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "identifier"
                                    ],
                                    "properties": {
                                        "endpoint": {
                                            "type": "string"
                                        },
                                        "identifier": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Usually a mistake in the JSON."
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/provider-data/api/1/harvest/plans/{plan_id}": {
            "get": {
                "operationId": "harvest-get-single",
                "summary": "Get single harvest plan",
                "description": "Get the json plan of a registered harvest, based on the its harvest id.\n",
                "tags": [
                    "Harvest"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/harvestPlanId"
                    }
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/harvestPlan"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/provider-data/api/1/harvest/runs/{run_id}": {
            "get": {
                "operationId": "harvest-run-info",
                "summary": "Information about a previous run",
                "description": "Gives information about a previous run for a specific harvest run.\n",
                "tags": [
                    "Harvest"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/harvestRunId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/provider-data/api/1/harvest/runs": {
            "get": {
                "operationId": "harvest-info",
                "summary": "List previous runs for a harvest id",
                "description": "Lists the identifiers (timestamps) of previous runs for a particular harvest id.\n",
                "tags": [
                    "Harvest"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/harvestPlanIdQuery"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "operationId": "harvest-run",
                "summary": "Run a harvest",
                "description": "Runs a harvest for a specific plan identifier inside json object payload.\n",
                "tags": [
                    "Harvest"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "plan_id"
                                ],
                                "properties": {
                                    "plan_id": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "identifier",
                                        "result"
                                    ],
                                    "properties": {
                                        "identifier": {
                                            "type": "string"
                                        },
                                        "result": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/provider-data/api/1/metastore/schemas": {
            "get": {
                "operationId": "metastore-get-schemas",
                "summary": "Get list of all schemas",
                "tags": [
                    "Metastore"
                ],
                "responses": {
                    "200": {
                        "description": "List of metastore schemas.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Full collection of available metastore schemas"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provider-data/api/1/metastore/schemas/{schema_id}": {
            "get": {
                "operationId": "metastore-get-schema",
                "summary": "Get a specific schema",
                "tags": [
                    "Metastore"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/schemaId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A schema definition, see https://json-schema.org/",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Schema not found"
                    }
                }
            }
        },
        "/provider-data/api/1/metastore/schemas/{schema_id}/items": {
            "get": {
                "operationId": "metastore-get-all",
                "summary": "Get all items for a specific schema (e.g., \"dataset\")",
                "tags": [
                    "Metastore"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/schemaId"
                    },
                    {
                        "$ref": "#/components/parameters/showReferenceIds"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Full list of all items for the given schema",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Array of metastore items matching the chosen schema.",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provider-data/api/1/metastore/schemas/{schema_id}/items/{identifier}/revisions": {
            "get": {
                "operationId": "metastore-get-all-revisions",
                "summary": "Get all revisions for an item.",
                "tags": [
                    "Metastore"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/schemaId"
                    },
                    {
                        "$ref": "#/components/parameters/exampleUuid"
                    }
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "Array of revision objects.",
                                    "items": {
                                        "$ref": "#/components/schemas/metastoreRevision"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            },
            "post": {
                "operationId": "metastore-revision-post",
                "summary": "Create new item revision/state.",
                "tags": [
                    "Metastore"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/schemaId"
                    },
                    {
                        "$ref": "#/components/parameters/exampleUuid"
                    }
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "Post a new revision object to change an item's moderation state. Simultaneous metastore item content changes and state changes not currently possible.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "Revision log message."
                                    },
                                    "state": {
                                        "type": "string",
                                        "enum": [
                                            "draft",
                                            "published",
                                            "hidden",
                                            "archived",
                                            "orphaned"
                                        ],
                                        "description": "The workflow state of this revision. Currently five states are supported in DKAN."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/201MetadataCreated"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    }
                }
            }
        },
        "/provider-data/api/1/metastore/schemas/{schema_id}/items/{identifier}/revisions/{revision_id}": {
            "get": {
                "operationId": "metastore-get-revision",
                "summary": "Get all revisions for an item.",
                "tags": [
                    "Metastore"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/schemaId"
                    },
                    {
                        "$ref": "#/components/parameters/exampleUuid"
                    },
                    {
                        "name": "revision_id",
                        "in": "path",
                        "description": "Revision identifier. Use \"identifier\" property from revision object.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    }
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/metastoreRevision"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            }
        },
        "/provider-data/api/1/metastore/schemas/dataset/items": {
            "post": {
                "operationId": "dataset-post",
                "summary": "Create a new dataset.",
                "tags": [
                    "Metastore: dataset"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "Takes the standard dataset schema, but does not require identifier.\n\nAutomatic example not yet available; try retrieving a dataset via GET, removing the identifier property, and pasting to test.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Project Open Data Dataset",
                                "description": "The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).",
                                "type": "object",
                                "required": [
                                    "bureauCode",
                                    "programCode",
                                    "title",
                                    "description",
                                    "keyword",
                                    "modified",
                                    "released",
                                    "publisher",
                                    "contactPoint",
                                    "accessLevel"
                                ],
                                "properties": {
                                    "@type": {
                                        "title": "Metadata Context",
                                        "type": "string",
                                        "description": "IRI for the JSON-LD data type. This should be dcat:Dataset for each Dataset.",
                                        "default": "dcat:Dataset"
                                    },
                                    "title": {
                                        "title": "Title",
                                        "description": "Human-readable name of the asset. Should be in plain English and include sufficient detail to facilitate search and discovery.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "identifier": {
                                        "title": "Unique Identifier",
                                        "description": "A unique identifier for the dataset or API as maintained within an Agency catalog or database.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "description": {
                                        "title": "Description",
                                        "description": "Human-readable description (e.g., an abstract) with sufficient detail to enable a user to quickly understand whether the asset is of interest.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "accessLevel": {
                                        "description": "The degree to which this dataset could be made publicly-available, regardless of whether it has been made available. Choices: public (Data asset is or could be made publicly available to all without restrictions), restricted public (Data asset is available under certain use restrictions), or non-public (Data asset is not available to members of the public).",
                                        "title": "Public Access Level",
                                        "type": "string",
                                        "enum": [
                                            "public",
                                            "restricted public",
                                            "private",
                                            "non-public"
                                        ],
                                        "default": "public"
                                    },
                                    "rights": {
                                        "title": "Rights",
                                        "description": "This may include information regarding access or restrictions based on privacy, security, or other policies. This should also provide an explanation for the selected \"accessLevel\" including instructions for how to access a restricted file, if applicable, or explanation for why a \"non-public\" or \"restricted public\" data assetis not \"public,\" if applicable. Text, 255 characters.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 255,
                                        "nullable": true
                                    },
                                    "accrualPeriodicity": {
                                        "title": "Frequency",
                                        "description": "Frequency with which dataset is published.",
                                        "type": "string",
                                        "enum": [
                                            "R/P10Y",
                                            "R/P4Y",
                                            "R/P1Y",
                                            "R/P2M",
                                            "R/P3.5D",
                                            "R/P1D",
                                            "R/P2W",
                                            "R/P6M",
                                            "R/P2Y",
                                            "R/P3Y",
                                            "R/P0.33W",
                                            "R/P0.33M",
                                            "R/PT1S",
                                            "R/P1M",
                                            "R/P3M",
                                            "R/P0.5M",
                                            "R/P4M",
                                            "R/P1W",
                                            "R/PT1H",
                                            "irregular"
                                        ]
                                    },
                                    "describedBy": {
                                        "title": "Data Dictionary",
                                        "description": "URL to the data dictionary for the dataset or API. Note that documentation other than a data dictionary can be referenced using Related Documents as shown in the expanded fields.",
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "describedByType": {
                                        "title": "Data Dictionary Type",
                                        "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.",
                                        "type": "string"
                                    },
                                    "issued": {
                                        "title": "Issue Date",
                                        "description": "Date of formal issuance.",
                                        "type": "string"
                                    },
                                    "modified": {
                                        "title": "Last Modified",
                                        "description": "Most recent date on which the dataset was changed, updated or modified.",
                                        "type": "string"
                                    },
                                    "released": {
                                        "title": "Release Date",
                                        "description": "Date on which the dataset is scheduled to be published.",
                                        "type": "string"
                                    },
                                    "nextUpdateDate": {
                                        "title": "Next Update Date",
                                        "description": "The date on which the dataset is expected to be updated next.",
                                        "type": "string"
                                    },
                                    "license": {
                                        "title": "License",
                                        "description": "The license dataset or API is published with. See <a href=\"https://project-open-data.cio.gov/open-licenses/\">Open Licenses</a> for more information.",
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "spatial": {
                                        "title": "Spatial",
                                        "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#spatial\">spatial coverage</a> of the dataset. Could include a spatial region like a bounding box or a named place.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "temporal": {
                                        "title": "Temporal",
                                        "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#temporal\">start and end dates</a> for which the dataset is applicable, separated by a \"/\" (i.e., 2000-01-15T00:45:00Z/2010-01-15T00:06:00Z).",
                                        "type": "string"
                                    },
                                    "isPartOf": {
                                        "title": "Collection",
                                        "description": "The collection of which the dataset is a subset.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "publisher": {
                                        "title": "Organization",
                                        "description": "A Dataset Publisher Organization.",
                                        "type": "object",
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "@type": {
                                                "title": "Metadata Context",
                                                "description": "IRI for the JSON-LD data type. This should be org:Organization for each publisher",
                                                "type": "string",
                                                "default": "org:Organization"
                                            },
                                            "name": {
                                                "title": "Publisher Name",
                                                "description": "",
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "subOrganizationOf": {
                                                "title": "Parent Organization",
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "bureauCode": {
                                        "title": "Bureau Code",
                                        "description": "Federal agencies, combined agency and bureau code from <a href=\"http://www.whitehouse.gov/sites/default/files/omb/assets/a11_current_year/app_c.pdf\">OMB Circular A-11, Appendix C</a> in the format of <code>015:010</code>.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "pattern": "[0-9]{3}:[0-9]{2}"
                                        },
                                        "minItems": 1,
                                        "uniqueItems": true
                                    },
                                    "programCode": {
                                        "title": "Program Code",
                                        "description": "Federal agencies, list the primary program related to this data asset, from the <a href=\"http://goals.performance.gov/sites/default/files/images/FederalProgramInventory_FY13_MachineReadable_091613.xls\">Federal Program Inventory</a>. Use the format of <code>015:001</code>",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1,
                                        "uniqueItems": true
                                    },
                                    "contactPoint": {
                                        "title": "Project Open Data ContactPoint vCard",
                                        "description": "A Dataset ContactPoint as a vCard object.",
                                        "type": "object",
                                        "required": [
                                            "fn"
                                        ],
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "required": [
                                                    "hasEmail"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "required": [
                                                    "hasURL"
                                                ]
                                            }
                                        ],
                                        "properties": {
                                            "@type": {
                                                "title": "Metadata Context",
                                                "description": "IRI for the JSON-LD data type. This should be vcard:Contact for contactPoint.",
                                                "enum": [
                                                    "vcard:Contact"
                                                ],
                                                "type": "string"
                                            },
                                            "fn": {
                                                "title": "Contact Name",
                                                "description": "A full formatted name, e.g. Firstname Lastname.",
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "hasEmail": {
                                                "title": "Email",
                                                "description": "Email address for the contact name.",
                                                "pattern": "^mailto:[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$|[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$",
                                                "type": "string"
                                            },
                                            "hasURL": {
                                                "title": "URL",
                                                "description": "URL for the contact",
                                                "format": "uri",
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "theme": {
                                        "title": "Category",
                                        "description": "Main thematic category of the dataset.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "title": "Category",
                                            "minLength": 1
                                        },
                                        "uniqueItems": true
                                    },
                                    "keyword": {
                                        "title": "Tags",
                                        "description": "Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non-technical users.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "title": "Tag",
                                            "minLength": 1
                                        },
                                        "minItems": 1
                                    },
                                    "distribution": {
                                        "title": "Distribution",
                                        "description": "A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.",
                                        "type": "array",
                                        "items": {
                                            "title": "Data File",
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "title": "Metadata Context",
                                                    "description": "IRI for the JSON-LD data type. This should be dcat:Distribution for each Distribution.",
                                                    "default": "dcat:Distribution",
                                                    "type": "string",
                                                    "readOnly": true
                                                },
                                                "title": {
                                                    "title": "Title",
                                                    "description": "Human-readable name of the file.",
                                                    "type": "string",
                                                    "minLength": 1
                                                },
                                                "description": {
                                                    "title": "Description",
                                                    "description": "Human-readable description of the file.",
                                                    "type": "string",
                                                    "minLength": 1
                                                },
                                                "format": {
                                                    "title": "Format",
                                                    "description": "A human-readable description of the file format of a distribution (i.e. csv, pdf, kml, etc.).",
                                                    "type": "string"
                                                },
                                                "mediaType": {
                                                    "title": "Media Type",
                                                    "description": "The machine-readable file format (<a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">IANA Media Type or MIME Type</a>) of the distribution\u2019s downloadURL.",
                                                    "type": "string"
                                                },
                                                "downloadURL": {
                                                    "title": "Download URL",
                                                    "description": "URL providing direct access to a downloadable file of a dataset.",
                                                    "type": "string",
                                                    "anyOf": [
                                                        {
                                                            "format": "uri"
                                                        }
                                                    ]
                                                },
                                                "accessURL": {
                                                    "title": "Access URL",
                                                    "description": "URL providing indirect access to a dataset.",
                                                    "type": "string",
                                                    "format": "uri"
                                                },
                                                "conformsTo": {
                                                    "title": "Data Standard",
                                                    "description": "URI used to identify a standardized specification the distribution conforms to.",
                                                    "type": "string",
                                                    "format": "uri"
                                                },
                                                "describedBy": {
                                                    "title": "Data Dictionary",
                                                    "description": "URL to the data dictionary for the distribution found at the downloadURL.",
                                                    "type": "string",
                                                    "format": "uri"
                                                },
                                                "describedByType": {
                                                    "title": "Data Dictionary Type",
                                                    "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.",
                                                    "pattern": "^[a-z]+?$",
                                                    "type": "string"
                                                }
                                            },
                                            "minItems": 1,
                                            "uniqueItems": true
                                        }
                                    },
                                    "references": {
                                        "title": "Related Documents",
                                        "description": "Related documents such as technical information about a dataset, developer documentation, etc.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uri"
                                        }
                                    },
                                    "archiveExclude": {
                                        "title": "Exclude from Archive",
                                        "description": "For excluding this dataset from its provider's 'download all datasets'.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Metadata creation successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/metastoreWriteResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "409": {
                        "$ref": "#/components/responses/409MetadataAlreadyExists"
                    }
                }
            }
        },
        "/provider-data/api/1/metastore/schemas/dataset/items/{identifier}": {
            "get": {
                "operationId": "dataset-get-item",
                "summary": "Get a single dataset.",
                "tags": [
                    "Metastore: dataset"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datasetUuid"
                    },
                    {
                        "$ref": "#/components/parameters/showReferenceIds"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Full dataset item.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dataset"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/404IdNotFound"
                    }
                }
            },
            "put": {
                "operationId": "dataset-put",
                "summary": "Replace a dataset",
                "description": "Object will be completely replaced; optional properties not included in the request will be deleted.\n\nAutomatic example not yet available; try retrieving a dataset via GET, changing values, and pasting to test. If no item exists with the provided identifier, it will be created.",
                "tags": [
                    "Metastore: dataset"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datasetUuid"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/dataset"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200MetadataUpdated"
                    },
                    "201": {
                        "$ref": "#/components/responses/201MetadataCreated"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "409": {
                        "$ref": "#/components/responses/409MetadataAlreadyExists"
                    },
                    "404": {
                        "$ref": "#/components/responses/404MetadataObjectNotFound"
                    }
                }
            },
            "patch": {
                "operationId": "dataset-patch",
                "summary": "Modify an existing dataset",
                "description": "Values provided will replace existing values, but required values may be omitted.\n\nAutomatic example not yet available; try retrieving a dataset via GET, changing values, removing unchanged properties, and pasting to test.",
                "tags": [
                    "Metastore: dataset"
                ],
                "security": [
                    {
                        "basic_auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datasetUuid"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Project Open Data Dataset",
                                "description": "The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).",
                                "type": "object",
                                "properties": {
                                    "@type": {
                                        "title": "Metadata Context",
                                        "type": "string",
                                        "description": "IRI for the JSON-LD data type. This should be dcat:Dataset for each Dataset.",
                                        "default": "dcat:Dataset"
                                    },
                                    "title": {
                                        "title": "Title",
                                        "description": "Human-readable name of the asset. Should be in plain English and include sufficient detail to facilitate search and discovery.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "identifier": {
                                        "title": "Unique Identifier",
                                        "description": "A unique identifier for the dataset or API as maintained within an Agency catalog or database.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "description": {
                                        "title": "Description",
                                        "description": "Human-readable description (e.g., an abstract) with sufficient detail to enable a user to quickly understand whether the asset is of interest.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "accessLevel": {
                                        "description": "The degree to which this dataset could be made publicly-available, regardless of whether it has been made available. Choices: public (Data asset is or could be made publicly available to all without restrictions), restricted public (Data asset is available under certain use restrictions), or non-public (Data asset is not available to members of the public).",
                                        "title": "Public Access Level",
                                        "type": "string",
                                        "enum": [
                                            "public",
                                            "restricted public",
                                            "private",
                                            "non-public"
                                        ],
                                        "default": "public"
                                    },
                                    "rights": {
                                        "title": "Rights",
                                        "description": "This may include information regarding access or restrictions based on privacy, security, or other policies. This should also provide an explanation for the selected \"accessLevel\" including instructions for how to access a restricted file, if applicable, or explanation for why a \"non-public\" or \"restricted public\" data assetis not \"public,\" if applicable. Text, 255 characters.",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 255,
                                        "nullable": true
                                    },
                                    "accrualPeriodicity": {
                                        "title": "Frequency",
                                        "description": "Frequency with which dataset is published.",
                                        "type": "string",
                                        "enum": [
                                            "R/P10Y",
                                            "R/P4Y",
                                            "R/P1Y",
                                            "R/P2M",
                                            "R/P3.5D",
                                            "R/P1D",
                                            "R/P2W",
                                            "R/P6M",
                                            "R/P2Y",
                                            "R/P3Y",
                                            "R/P0.33W",
                                            "R/P0.33M",
                                            "R/PT1S",
                                            "R/P1M",
                                            "R/P3M",
                                            "R/P0.5M",
                                            "R/P4M",
                                            "R/P1W",
                                            "R/PT1H",
                                            "irregular"
                                        ]
                                    },
                                    "describedBy": {
                                        "title": "Data Dictionary",
                                        "description": "URL to the data dictionary for the dataset or API. Note that documentation other than a data dictionary can be referenced using Related Documents as shown in the expanded fields.",
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "describedByType": {
                                        "title": "Data Dictionary Type",
                                        "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.",
                                        "type": "string"
                                    },
                                    "issued": {
                                        "title": "Issue Date",
                                        "description": "Date of formal issuance.",
                                        "type": "string"
                                    },
                                    "modified": {
                                        "title": "Last Modified",
                                        "description": "Most recent date on which the dataset was changed, updated or modified.",
                                        "type": "string"
                                    },
                                    "released": {
                                        "title": "Release Date",
                                        "description": "Date on which the dataset is scheduled to be published.",
                                        "type": "string"
                                    },
                                    "nextUpdateDate": {
                                        "title": "Next Update Date",
                                        "description": "The date on which the dataset is expected to be updated next.",
                                        "type": "string"
                                    },
                                    "license": {
                                        "title": "License",
                                        "description": "The license dataset or API is published with. See <a href=\"https://project-open-data.cio.gov/open-licenses/\">Open Licenses</a> for more information.",
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "spatial": {
                                        "title": "Spatial",
                                        "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#spatial\">spatial coverage</a> of the dataset. Could include a spatial region like a bounding box or a named place.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "temporal": {
                                        "title": "Temporal",
                                        "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#temporal\">start and end dates</a> for which the dataset is applicable, separated by a \"/\" (i.e., 2000-01-15T00:45:00Z/2010-01-15T00:06:00Z).",
                                        "type": "string"
                                    },
                                    "isPartOf": {
                                        "title": "Collection",
                                        "description": "The collection of which the dataset is a subset.",
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "publisher": {
                                        "title": "Organization",
                                        "description": "A Dataset Publisher Organization.",
                                        "type": "object",
                                        "properties": {
                                            "@type": {
                                                "title": "Metadata Context",
                                                "description": "IRI for the JSON-LD data type. This should be org:Organization for each publisher",
                                                "type": "string",
                                                "default": "org:Organization"
                                            },
                                            "name": {
                                                "title": "Publisher Name",
                                                "description": "",
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "subOrganizationOf": {
                                                "title": "Parent Organization",
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "bureauCode": {
                                        "title": "Bureau Code",
                                        "description": "Federal agencies, combined agency and bureau code from <a href=\"http://www.whitehouse.gov/sites/default/files/omb/assets/a11_current_year/app_c.pdf\">OMB Circular A-11, Appendix C</a> in the format of <code>015:010</code>.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "pattern": "[0-9]{3}:[0-9]{2}"
                                        },
                                        "minItems": 1,
                                        "uniqueItems": true
                                    },
                                    "programCode": {
                                        "title": "Program Code",
                                        "description": "Federal agencies, list the primary program related to this data asset, from the <a href=\"http://goals.performance.gov/sites/default/files/images/FederalProgramInventory_FY13_MachineReadable_091613.xls\">Federal Program Inventory</a>. Use the format of <code>015:001</code>",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1,
                                        "uniqueItems": true
                                    },
                                    "contactPoint": {
                                        "title": "Project Open Data ContactPoint vCard",
                                        "description": "A Dataset ContactPoint as a vCard object.",
                                        "type": "object",
                                        "oneOf": [
                                            {
                                                "type": "object"
                                            },
                                            {
                                                "type": "object"
                                            }
                                        ],
                                        "properties": {
                                            "@type": {
                                                "title": "Metadata Context",
                                                "description": "IRI for the JSON-LD data type. This should be vcard:Contact for contactPoint.",
                                                "enum": [
                                                    "vcard:Contact"
                                                ],
                                                "type": "string"
                                            },
                                            "fn": {
                                                "title": "Contact Name",
                                                "description": "A full formatted name, e.g. Firstname Lastname.",
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "hasEmail": {
                                                "title": "Email",
                                                "description": "Email address for the contact name.",
                                                "pattern": "^mailto:[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$|[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$",
                                                "type": "string"
                                            },
                                            "hasURL": {
                                                "title": "URL",
                                                "description": "URL for the contact",
                                                "format": "uri",
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "theme": {
                                        "title": "Category",
                                        "description": "Main thematic category of the dataset.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "title": "Category",
                                            "minLength": 1
                                        },
                                        "uniqueItems": true
                                    },
                                    "keyword": {
                                        "title": "Tags",
                                        "description": "Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non-technical users.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "title": "Tag",
                                            "minLength": 1
                                        },
                                        "minItems": 1
                                    },
                                    "distribution": {
                                        "title": "Distribution",
                                        "description": "A distribution is a container for the data object. Each distribution should contain one accessURL or downloadURL. When providing a downloadURL, also include the format of the file.",
                                        "type": "array",
                                        "items": {
                                            "title": "Data File",
                                            "type": "object",
                                            "properties": {
                                                "@type": {
                                                    "title": "Metadata Context",
                                                    "description": "IRI for the JSON-LD data type. This should be dcat:Distribution for each Distribution.",
                                                    "default": "dcat:Distribution",
                                                    "type": "string",
                                                    "readOnly": true
                                                },
                                                "title": {
                                                    "title": "Title",
                                                    "description": "Human-readable name of the file.",
                                                    "type": "string",
                                                    "minLength": 1
                                                },
                                                "description": {
                                                    "title": "Description",
                                                    "description": "Human-readable description of the file.",
                                                    "type": "string",
                                                    "minLength": 1
                                                },
                                                "format": {
                                                    "title": "Format",
                                                    "description": "A human-readable description of the file format of a distribution (i.e. csv, pdf, kml, etc.).",
                                                    "type": "string"
                                                },
                                                "mediaType": {
                                                    "title": "Media Type",
                                                    "description": "The machine-readable file format (<a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">IANA Media Type or MIME Type</a>) of the distribution\u2019s downloadURL.",
                                                    "type": "string"
                                                },
                                                "downloadURL": {
                                                    "title": "Download URL",
                                                    "description": "URL providing direct access to a downloadable file of a dataset.",
                                                    "type": "string",
                                                    "anyOf": [
                                                        {
                                                            "format": "uri"
                                                        }
                                                    ]
                                                },
                                                "accessURL": {
                                                    "title": "Access URL",
                                                    "description": "URL providing indirect access to a dataset.",
                                                    "type": "string",
                                                    "format": "uri"
                                                },
                                                "conformsTo": {
                                                    "title": "Data Standard",
                                                    "description": "URI used to identify a standardized specification the distribution conforms to.",
                                                    "type": "string",
                                                    "format": "uri"
                                                },
                                                "describedBy": {
                                                    "title": "Data Dictionary",
                                                    "description": "URL to the data dictionary for the distribution found at the downloadURL.",
                                                    "type": "string",
                                                    "format": "uri"
                                                },
                                                "describedByType": {
                                                    "title": "Data Dictionary Type",
                                                    "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution\u2019s describedBy URL.",
                                                    "pattern": "^[a-z]+?$",
                                                    "type": "string"
                                                }
                                            },
                                            "minItems": 1,
                                            "uniqueItems": true
                                        }
                                    },
                                    "references": {
                                        "title": "Related Documents",
                                        "description": "Related documents such as technical information about a dataset, developer documentation, etc.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uri"
                                        }
                                    },
                                    "archiveExclude": {
                                        "title": "Exclude from Archive",
                                        "description": "For excluding this dataset from its provider's 'download all datasets'.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200MetadataUpdated"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadJson"
                    },
                    "404": {
                        "$ref": "#/components/responses/404MetadataObjectNotFound"
                    }
                }
            }
        },
        "/provider-data/api/1/search": {
            "get": {
                "operationId": "search",
                "summary": "Search the DKAN catalog",
                "description": "Search description.\n",
                "tags": [
                    "Search"
                ],
                "parameters": [
                    {
                        "name": "fulltext",
                        "in": "query",
                        "description": "Full-text search to run against any metadata fields indexed for fulltext searches.",
                        "schema": {
                            "type": "string",
                            "default": ""
                        },
                        "allowEmptyValue": true,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page of the result set.",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1,
                        "style": "form"
                    },
                    {
                        "name": "page-size",
                        "in": "query",
                        "description": "How many results per page.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "minimum": 1,
                            "maximum": 100
                        },
                        "example": 20,
                        "style": "form"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Which property to sort results on. Available properties: <em class=\"placeholder\">access_level, description, keyword, modified, theme, title, title_string, search_api_relevance</em>",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "default": "title"
                            }
                        },
                        "style": "form",
                        "explode": false
                    },
                    {
                        "name": "sort-order",
                        "in": "query",
                        "description": "Sort results in ascending or descending order. Allowed values: <em>asc, desc</em>",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "default": "asc"
                            }
                        },
                        "style": "form",
                        "explode": false
                    },
                    {
                        "name": "facets",
                        "in": "query",
                        "required": false,
                        "allowEmptyValue": true,
                        "description": "Request information on facets. Pass a comma-separated list to get specific facets. Pass an empty value or \"0\" for no facet infrmation. Omit this parameter to get all facet information.",
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false
                    },
                    {
                        "name": "theme",
                        "in": "query",
                        "description": "Filter results using <em class=\"placeholder\">theme</em> facet.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "Supplier directory",
                        "style": "form"
                    },
                    {
                        "name": "keyword",
                        "in": "query",
                        "description": "Filter results using <em class=\"placeholder\">keyword</em> facet.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "Unknown Supplier/Provider Specialty",
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total": {
                                            "type": "integer",
                                            "description": "Total search results for query."
                                        },
                                        "results": {
                                            "type": "object",
                                            "description": "An object with keys following the format \"dkan_dataset/[uuid]\", containing full dataset objects from the DKAN metastore."
                                        },
                                        "facets": {
                                            "$ref": "#/components/schemas/facets"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provider-data/api/1/search/facets": {
            "get": {
                "operationId": "search-facets",
                "summary": "Retrieve search facet information",
                "tags": [
                    "Search"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "facets": {
                                            "$ref": "#/components/schemas/facets"
                                        },
                                        "time": {
                                            "type": "number",
                                            "description": "Execution time."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Metastore",
            "description": "Work with metadata items."
        },
        {
            "name": "Metastore: dataset",
            "description": "CRUD operations for dataset metastore items. Substitute any other schema name for \"dataset\" to modify other items."
        }
    ]
}